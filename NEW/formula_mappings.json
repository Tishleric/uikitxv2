{
  "metadata": {
    "source_file": "actantpnl.xlsx",
    "extraction_date": "2025-06-10T12:39:35.098984",
    "sections": [
      "input_data",
      "call_analysis",
      "put_analysis"
    ]
  },
  "formulas": {
    "input_data": {},
    "call_analysis": {
      "E19": {
        "excel_formula": "=E14",
        "dependencies": [
          "E14"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =E14"
      },
      "F19": {
        "excel_formula": "=F14",
        "dependencies": [
          "F14"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =F14"
      },
      "G19": {
        "excel_formula": "=G14",
        "dependencies": [
          "G14"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =G14"
      },
      "H19": {
        "excel_formula": "=H14",
        "dependencies": [
          "H14"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =H14"
      },
      "I19": {
        "excel_formula": "=I14",
        "dependencies": [
          "I14"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =I14"
      },
      "J19": {
        "excel_formula": "=J14",
        "dependencies": [
          "J14"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =J14"
      },
      "K19": {
        "excel_formula": "=K14",
        "dependencies": [
          "K14"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =K14"
      },
      "L19": {
        "excel_formula": "=L14",
        "dependencies": [
          "L14"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =L14"
      },
      "M19": {
        "excel_formula": "=M14",
        "dependencies": [
          "M14"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =M14"
      },
      "N19": {
        "excel_formula": "=N14",
        "dependencies": [
          "N14"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =N14"
      },
      "O19": {
        "excel_formula": "=O14",
        "dependencies": [
          "O14"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =O14"
      },
      "P19": {
        "excel_formula": "=P14",
        "dependencies": [
          "P14"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =P14"
      },
      "Q19": {
        "excel_formula": "=Q14",
        "dependencies": [
          "Q14"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Q14"
      },
      "R19": {
        "excel_formula": "=R14",
        "dependencies": [
          "R14"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =R14"
      },
      "S19": {
        "excel_formula": "=S14",
        "dependencies": [
          "S14"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =S14"
      },
      "T19": {
        "excel_formula": "=T14",
        "dependencies": [
          "T14"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =T14"
      },
      "U19": {
        "excel_formula": "=U14",
        "dependencies": [
          "U14"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =U14"
      },
      "V19": {
        "excel_formula": "=V14",
        "dependencies": [
          "V14"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =V14"
      },
      "W19": {
        "excel_formula": "=W14",
        "dependencies": [
          "W14"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =W14"
      },
      "X19": {
        "excel_formula": "=X14",
        "dependencies": [
          "X14"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =X14"
      },
      "Y19": {
        "excel_formula": "=Y14",
        "dependencies": [
          "Y14"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Y14"
      },
      "Z19": {
        "excel_formula": "=Z14",
        "dependencies": [
          "Z14"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Z14"
      },
      "AA19": {
        "excel_formula": "=AA14",
        "dependencies": [
          "AA14"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AA14"
      },
      "AB19": {
        "excel_formula": "=AB14",
        "dependencies": [
          "AB14"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AB14"
      },
      "AC19": {
        "excel_formula": "=AC14",
        "dependencies": [
          "AC14"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AC14"
      },
      "E20": {
        "excel_formula": "=$Q$20+$Q$4*(E18-$Q$18)+0.5*$Q$6*(E18-$Q$18)*(E18-$Q$18)",
        "dependencies": [
          "$Q$20",
          "$Q$4",
          "E18",
          "$Q$18",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$20+$Q$4*(E18-$Q$18)+0.5*$Q$6*(E18-$Q$18)*(E18-$Q$18)"
      },
      "F20": {
        "excel_formula": "=$Q$20+$Q$4*(F18-$Q$18)+0.5*$Q$6*(F18-$Q$18)*(F18-$Q$18)",
        "dependencies": [
          "$Q$20",
          "$Q$4",
          "F18",
          "$Q$18",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$20+$Q$4*(F18-$Q$18)+0.5*$Q$6*(F18-$Q$18)*(F18-$Q$18)"
      },
      "G20": {
        "excel_formula": "=$Q$20+$Q$4*(G18-$Q$18)+0.5*$Q$6*(G18-$Q$18)*(G18-$Q$18)",
        "dependencies": [
          "$Q$20",
          "$Q$4",
          "G18",
          "$Q$18",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$20+$Q$4*(G18-$Q$18)+0.5*$Q$6*(G18-$Q$18)*(G18-$Q$18)"
      },
      "H20": {
        "excel_formula": "=$Q$20+$Q$4*(H18-$Q$18)+0.5*$Q$6*(H18-$Q$18)*(H18-$Q$18)",
        "dependencies": [
          "$Q$20",
          "$Q$4",
          "H18",
          "$Q$18",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$20+$Q$4*(H18-$Q$18)+0.5*$Q$6*(H18-$Q$18)*(H18-$Q$18)"
      },
      "I20": {
        "excel_formula": "=$Q$20+$Q$4*(I18-$Q$18)+0.5*$Q$6*(I18-$Q$18)*(I18-$Q$18)",
        "dependencies": [
          "$Q$20",
          "$Q$4",
          "I18",
          "$Q$18",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$20+$Q$4*(I18-$Q$18)+0.5*$Q$6*(I18-$Q$18)*(I18-$Q$18)"
      },
      "J20": {
        "excel_formula": "=$Q$20+$Q$4*(J18-$Q$18)+0.5*$Q$6*(J18-$Q$18)*(J18-$Q$18)",
        "dependencies": [
          "$Q$20",
          "$Q$4",
          "J18",
          "$Q$18",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$20+$Q$4*(J18-$Q$18)+0.5*$Q$6*(J18-$Q$18)*(J18-$Q$18)"
      },
      "K20": {
        "excel_formula": "=$Q$20+$Q$4*(K18-$Q$18)+0.5*$Q$6*(K18-$Q$18)*(K18-$Q$18)",
        "dependencies": [
          "$Q$20",
          "$Q$4",
          "K18",
          "$Q$18",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$20+$Q$4*(K18-$Q$18)+0.5*$Q$6*(K18-$Q$18)*(K18-$Q$18)"
      },
      "L20": {
        "excel_formula": "=$Q$20+$Q$4*(L18-$Q$18)+0.5*$Q$6*(L18-$Q$18)*(L18-$Q$18)",
        "dependencies": [
          "$Q$20",
          "$Q$4",
          "L18",
          "$Q$18",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$20+$Q$4*(L18-$Q$18)+0.5*$Q$6*(L18-$Q$18)*(L18-$Q$18)"
      },
      "M20": {
        "excel_formula": "=$Q$20+$Q$4*(M18-$Q$18)+0.5*$Q$6*(M18-$Q$18)*(M18-$Q$18)",
        "dependencies": [
          "$Q$20",
          "$Q$4",
          "M18",
          "$Q$18",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$20+$Q$4*(M18-$Q$18)+0.5*$Q$6*(M18-$Q$18)*(M18-$Q$18)"
      },
      "N20": {
        "excel_formula": "=$Q$20+$Q$4*(N18-$Q$18)+0.5*$Q$6*(N18-$Q$18)*(N18-$Q$18)",
        "dependencies": [
          "$Q$20",
          "$Q$4",
          "N18",
          "$Q$18",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$20+$Q$4*(N18-$Q$18)+0.5*$Q$6*(N18-$Q$18)*(N18-$Q$18)"
      },
      "O20": {
        "excel_formula": "=$Q$20+$Q$4*(O18-$Q$18)+0.5*$Q$6*(O18-$Q$18)*(O18-$Q$18)",
        "dependencies": [
          "$Q$20",
          "$Q$4",
          "O18",
          "$Q$18",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$20+$Q$4*(O18-$Q$18)+0.5*$Q$6*(O18-$Q$18)*(O18-$Q$18)"
      },
      "P20": {
        "excel_formula": "=$Q$20+$Q$4*(P18-$Q$18)+0.5*$Q$6*(P18-$Q$18)*(P18-$Q$18)",
        "dependencies": [
          "$Q$20",
          "$Q$4",
          "P18",
          "$Q$18",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$20+$Q$4*(P18-$Q$18)+0.5*$Q$6*(P18-$Q$18)*(P18-$Q$18)"
      },
      "Q20": {
        "excel_formula": "=Q14",
        "dependencies": [
          "Q14"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Q14"
      },
      "R20": {
        "excel_formula": "=$Q$20+$Q$4*(R18-$Q$18)+0.5*$Q$6*(R18-$Q$18)*(R18-$Q$18)",
        "dependencies": [
          "$Q$20",
          "$Q$4",
          "R18",
          "$Q$18",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$20+$Q$4*(R18-$Q$18)+0.5*$Q$6*(R18-$Q$18)*(R18-$Q$18)"
      },
      "S20": {
        "excel_formula": "=$Q$20+$Q$4*(S18-$Q$18)+0.5*$Q$6*(S18-$Q$18)*(S18-$Q$18)",
        "dependencies": [
          "$Q$20",
          "$Q$4",
          "S18",
          "$Q$18",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$20+$Q$4*(S18-$Q$18)+0.5*$Q$6*(S18-$Q$18)*(S18-$Q$18)"
      },
      "T20": {
        "excel_formula": "=$Q$20+$Q$4*(T18-$Q$18)+0.5*$Q$6*(T18-$Q$18)*(T18-$Q$18)",
        "dependencies": [
          "$Q$20",
          "$Q$4",
          "T18",
          "$Q$18",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$20+$Q$4*(T18-$Q$18)+0.5*$Q$6*(T18-$Q$18)*(T18-$Q$18)"
      },
      "U20": {
        "excel_formula": "=$Q$20+$Q$4*(U18-$Q$18)+0.5*$Q$6*(U18-$Q$18)*(U18-$Q$18)",
        "dependencies": [
          "$Q$20",
          "$Q$4",
          "U18",
          "$Q$18",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$20+$Q$4*(U18-$Q$18)+0.5*$Q$6*(U18-$Q$18)*(U18-$Q$18)"
      },
      "V20": {
        "excel_formula": "=$Q$20+$Q$4*(V18-$Q$18)+0.5*$Q$6*(V18-$Q$18)*(V18-$Q$18)",
        "dependencies": [
          "$Q$20",
          "$Q$4",
          "V18",
          "$Q$18",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$20+$Q$4*(V18-$Q$18)+0.5*$Q$6*(V18-$Q$18)*(V18-$Q$18)"
      },
      "W20": {
        "excel_formula": "=$Q$20+$Q$4*(W18-$Q$18)+0.5*$Q$6*(W18-$Q$18)*(W18-$Q$18)",
        "dependencies": [
          "$Q$20",
          "$Q$4",
          "W18",
          "$Q$18",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$20+$Q$4*(W18-$Q$18)+0.5*$Q$6*(W18-$Q$18)*(W18-$Q$18)"
      },
      "X20": {
        "excel_formula": "=$Q$20+$Q$4*(X18-$Q$18)+0.5*$Q$6*(X18-$Q$18)*(X18-$Q$18)",
        "dependencies": [
          "$Q$20",
          "$Q$4",
          "X18",
          "$Q$18",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$20+$Q$4*(X18-$Q$18)+0.5*$Q$6*(X18-$Q$18)*(X18-$Q$18)"
      },
      "Y20": {
        "excel_formula": "=$Q$20+$Q$4*(Y18-$Q$18)+0.5*$Q$6*(Y18-$Q$18)*(Y18-$Q$18)",
        "dependencies": [
          "$Q$20",
          "$Q$4",
          "Y18",
          "$Q$18",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$20+$Q$4*(Y18-$Q$18)+0.5*$Q$6*(Y18-$Q$18)*(Y18-$Q$18)"
      },
      "Z20": {
        "excel_formula": "=$Q$20+$Q$4*(Z18-$Q$18)+0.5*$Q$6*(Z18-$Q$18)*(Z18-$Q$18)",
        "dependencies": [
          "$Q$20",
          "$Q$4",
          "Z18",
          "$Q$18",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$20+$Q$4*(Z18-$Q$18)+0.5*$Q$6*(Z18-$Q$18)*(Z18-$Q$18)"
      },
      "AA20": {
        "excel_formula": "=$Q$20+$Q$4*(AA18-$Q$18)+0.5*$Q$6*(AA18-$Q$18)*(AA18-$Q$18)",
        "dependencies": [
          "$Q$20",
          "$Q$4",
          "AA18",
          "$Q$18",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$20+$Q$4*(AA18-$Q$18)+0.5*$Q$6*(AA18-$Q$18)*(AA18-$Q$18)"
      },
      "AB20": {
        "excel_formula": "=$Q$20+$Q$4*(AB18-$Q$18)+0.5*$Q$6*(AB18-$Q$18)*(AB18-$Q$18)",
        "dependencies": [
          "$Q$20",
          "$Q$4",
          "AB18",
          "$Q$18",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$20+$Q$4*(AB18-$Q$18)+0.5*$Q$6*(AB18-$Q$18)*(AB18-$Q$18)"
      },
      "AC20": {
        "excel_formula": "=$Q$20+$Q$4*(AC18-$Q$18)+0.5*$Q$6*(AC18-$Q$18)*(AC18-$Q$18)",
        "dependencies": [
          "$Q$20",
          "$Q$4",
          "AC18",
          "$Q$18",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$20+$Q$4*(AC18-$Q$18)+0.5*$Q$6*(AC18-$Q$18)*(AC18-$Q$18)"
      },
      "E21": {
        "excel_formula": "=F14+F4*(E18-F18)+0.5*F6*(E18-F18)*(E18-F18)",
        "dependencies": [
          "F14",
          "F4",
          "E18",
          "F18",
          "F6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =F14+F4*(E18-F18)+0.5*F6*(E18-F18)*(E18-F18)"
      },
      "F21": {
        "excel_formula": "=G14+G4*(F18-G18)+0.5*G6*(F18-G18)*(F18-G18)",
        "dependencies": [
          "G14",
          "G4",
          "F18",
          "G18",
          "G6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =G14+G4*(F18-G18)+0.5*G6*(F18-G18)*(F18-G18)"
      },
      "G21": {
        "excel_formula": "=H14+H4*(G18-H18)+0.5*H6*(G18-H18)*(G18-H18)",
        "dependencies": [
          "H14",
          "H4",
          "G18",
          "H18",
          "H6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =H14+H4*(G18-H18)+0.5*H6*(G18-H18)*(G18-H18)"
      },
      "H21": {
        "excel_formula": "=I14+I4*(H18-I18)+0.5*I6*(H18-I18)*(H18-I18)",
        "dependencies": [
          "I14",
          "I4",
          "H18",
          "I18",
          "I6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =I14+I4*(H18-I18)+0.5*I6*(H18-I18)*(H18-I18)"
      },
      "I21": {
        "excel_formula": "=J14+J4*(I18-J18)+0.5*J6*(I18-J18)*(I18-J18)",
        "dependencies": [
          "J14",
          "J4",
          "I18",
          "J18",
          "J6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =J14+J4*(I18-J18)+0.5*J6*(I18-J18)*(I18-J18)"
      },
      "J21": {
        "excel_formula": "=K14+K4*(J18-K18)+0.5*K6*(J18-K18)*(J18-K18)",
        "dependencies": [
          "K14",
          "K4",
          "J18",
          "K18",
          "K6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =K14+K4*(J18-K18)+0.5*K6*(J18-K18)*(J18-K18)"
      },
      "K21": {
        "excel_formula": "=L14+L4*(K18-L18)+0.5*L6*(K18-L18)*(K18-L18)",
        "dependencies": [
          "L14",
          "L4",
          "K18",
          "L18",
          "L6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =L14+L4*(K18-L18)+0.5*L6*(K18-L18)*(K18-L18)"
      },
      "L21": {
        "excel_formula": "=M14+M4*(L18-M18)+0.5*M6*(L18-M18)*(L18-M18)",
        "dependencies": [
          "M14",
          "M4",
          "L18",
          "M18",
          "M6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =M14+M4*(L18-M18)+0.5*M6*(L18-M18)*(L18-M18)"
      },
      "M21": {
        "excel_formula": "=N14+N4*(M18-N18)+0.5*N6*(M18-N18)*(M18-N18)",
        "dependencies": [
          "N14",
          "N4",
          "M18",
          "N18",
          "N6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =N14+N4*(M18-N18)+0.5*N6*(M18-N18)*(M18-N18)"
      },
      "N21": {
        "excel_formula": "=O14+O4*(N18-O18)+0.5*O6*(N18-O18)*(N18-O18)",
        "dependencies": [
          "O14",
          "O4",
          "N18",
          "O18",
          "O6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =O14+O4*(N18-O18)+0.5*O6*(N18-O18)*(N18-O18)"
      },
      "O21": {
        "excel_formula": "=P14+P4*(O18-P18)+0.5*P6*(O18-P18)*(O18-P18)",
        "dependencies": [
          "P14",
          "P4",
          "O18",
          "P18",
          "P6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =P14+P4*(O18-P18)+0.5*P6*(O18-P18)*(O18-P18)"
      },
      "P21": {
        "excel_formula": "=Q14+Q4*(P18-Q18)+0.5*Q6*(P18-Q18)*(P18-Q18)",
        "dependencies": [
          "Q14",
          "Q4",
          "P18",
          "Q18",
          "Q6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Q14+Q4*(P18-Q18)+0.5*Q6*(P18-Q18)*(P18-Q18)"
      },
      "Q21": {
        "excel_formula": "=Q14",
        "dependencies": [
          "Q14"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Q14"
      },
      "R21": {
        "excel_formula": "=Q14+Q4*(R18-Q18)+0.5*Q6*(R18-Q18)*(R18-Q18)",
        "dependencies": [
          "Q14",
          "Q4",
          "R18",
          "Q18",
          "Q6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Q14+Q4*(R18-Q18)+0.5*Q6*(R18-Q18)*(R18-Q18)"
      },
      "S21": {
        "excel_formula": "=R14+R4*(S18-R18)+0.5*R6*(S18-R18)*(S18-R18)",
        "dependencies": [
          "R14",
          "R4",
          "S18",
          "R18",
          "R6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =R14+R4*(S18-R18)+0.5*R6*(S18-R18)*(S18-R18)"
      },
      "T21": {
        "excel_formula": "=S14+S4*(T18-S18)+0.5*S6*(T18-S18)*(T18-S18)",
        "dependencies": [
          "S14",
          "S4",
          "T18",
          "S18",
          "S6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =S14+S4*(T18-S18)+0.5*S6*(T18-S18)*(T18-S18)"
      },
      "U21": {
        "excel_formula": "=T14+T4*(U18-T18)+0.5*T6*(U18-T18)*(U18-T18)",
        "dependencies": [
          "T14",
          "T4",
          "U18",
          "T18",
          "T6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =T14+T4*(U18-T18)+0.5*T6*(U18-T18)*(U18-T18)"
      },
      "V21": {
        "excel_formula": "=U14+U4*(V18-U18)+0.5*U6*(V18-U18)*(V18-U18)",
        "dependencies": [
          "U14",
          "U4",
          "V18",
          "U18",
          "U6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =U14+U4*(V18-U18)+0.5*U6*(V18-U18)*(V18-U18)"
      },
      "W21": {
        "excel_formula": "=V14+V4*(W18-V18)+0.5*V6*(W18-V18)*(W18-V18)",
        "dependencies": [
          "V14",
          "V4",
          "W18",
          "V18",
          "V6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =V14+V4*(W18-V18)+0.5*V6*(W18-V18)*(W18-V18)"
      },
      "X21": {
        "excel_formula": "=W14+W4*(X18-W18)+0.5*W6*(X18-W18)*(X18-W18)",
        "dependencies": [
          "W14",
          "W4",
          "X18",
          "W18",
          "W6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =W14+W4*(X18-W18)+0.5*W6*(X18-W18)*(X18-W18)"
      },
      "Y21": {
        "excel_formula": "=X14+X4*(Y18-X18)+0.5*X6*(Y18-X18)*(Y18-X18)",
        "dependencies": [
          "X14",
          "X4",
          "Y18",
          "X18",
          "X6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =X14+X4*(Y18-X18)+0.5*X6*(Y18-X18)*(Y18-X18)"
      },
      "Z21": {
        "excel_formula": "=Y14+Y4*(Z18-Y18)+0.5*Y6*(Z18-Y18)*(Z18-Y18)",
        "dependencies": [
          "Y14",
          "Y4",
          "Z18",
          "Y18",
          "Y6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Y14+Y4*(Z18-Y18)+0.5*Y6*(Z18-Y18)*(Z18-Y18)"
      },
      "AA21": {
        "excel_formula": "=Z14+Z4*(AA18-Z18)+0.5*Z6*(AA18-Z18)*(AA18-Z18)",
        "dependencies": [
          "Z14",
          "Z4",
          "AA18",
          "Z18",
          "Z6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Z14+Z4*(AA18-Z18)+0.5*Z6*(AA18-Z18)*(AA18-Z18)"
      },
      "AB21": {
        "excel_formula": "=AA14+AA4*(AB18-AA18)+0.5*AA6*(AB18-AA18)*(AB18-AA18)",
        "dependencies": [
          "AA14",
          "AA4",
          "AB18",
          "AA18",
          "AA6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AA14+AA4*(AB18-AA18)+0.5*AA6*(AB18-AA18)*(AB18-AA18)"
      },
      "AC21": {
        "excel_formula": "=AB14+AB4*(AC18-AB18)+0.5*AB6*(AC18-AB18)*(AC18-AB18)",
        "dependencies": [
          "AB14",
          "AB4",
          "AC18",
          "AB18",
          "AB6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AB14+AB4*(AC18-AB18)+0.5*AB6*(AC18-AB18)*(AC18-AB18)"
      },
      "E22": {
        "excel_formula": "=E20-E19",
        "dependencies": [
          "E20",
          "E19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =E20-E19"
      },
      "F22": {
        "excel_formula": "=F20-F19",
        "dependencies": [
          "F20",
          "F19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =F20-F19"
      },
      "G22": {
        "excel_formula": "=G20-G19",
        "dependencies": [
          "G20",
          "G19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =G20-G19"
      },
      "H22": {
        "excel_formula": "=H20-H19",
        "dependencies": [
          "H20",
          "H19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =H20-H19"
      },
      "I22": {
        "excel_formula": "=I20-I19",
        "dependencies": [
          "I20",
          "I19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =I20-I19"
      },
      "J22": {
        "excel_formula": "=J20-J19",
        "dependencies": [
          "J20",
          "J19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =J20-J19"
      },
      "K22": {
        "excel_formula": "=K20-K19",
        "dependencies": [
          "K20",
          "K19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =K20-K19"
      },
      "L22": {
        "excel_formula": "=L20-L19",
        "dependencies": [
          "L20",
          "L19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =L20-L19"
      },
      "M22": {
        "excel_formula": "=M20-M19",
        "dependencies": [
          "M20",
          "M19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =M20-M19"
      },
      "N22": {
        "excel_formula": "=N20-N19",
        "dependencies": [
          "N20",
          "N19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =N20-N19"
      },
      "O22": {
        "excel_formula": "=O20-O19",
        "dependencies": [
          "O20",
          "O19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =O20-O19"
      },
      "P22": {
        "excel_formula": "=P20-P19",
        "dependencies": [
          "P20",
          "P19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =P20-P19"
      },
      "Q22": {
        "excel_formula": "=Q20-Q19",
        "dependencies": [
          "Q20",
          "Q19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Q20-Q19"
      },
      "R22": {
        "excel_formula": "=R20-R19",
        "dependencies": [
          "R20",
          "R19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =R20-R19"
      },
      "S22": {
        "excel_formula": "=S20-S19",
        "dependencies": [
          "S20",
          "S19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =S20-S19"
      },
      "T22": {
        "excel_formula": "=T20-T19",
        "dependencies": [
          "T20",
          "T19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =T20-T19"
      },
      "U22": {
        "excel_formula": "=U20-U19",
        "dependencies": [
          "U20",
          "U19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =U20-U19"
      },
      "V22": {
        "excel_formula": "=V20-V19",
        "dependencies": [
          "V20",
          "V19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =V20-V19"
      },
      "W22": {
        "excel_formula": "=W20-W19",
        "dependencies": [
          "W20",
          "W19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =W20-W19"
      },
      "X22": {
        "excel_formula": "=X20-X19",
        "dependencies": [
          "X20",
          "X19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =X20-X19"
      },
      "Y22": {
        "excel_formula": "=Y20-Y19",
        "dependencies": [
          "Y20",
          "Y19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Y20-Y19"
      },
      "Z22": {
        "excel_formula": "=Z20-Z19",
        "dependencies": [
          "Z20",
          "Z19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Z20-Z19"
      },
      "AA22": {
        "excel_formula": "=AA20-AA19",
        "dependencies": [
          "AA20",
          "AA19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AA20-AA19"
      },
      "AB22": {
        "excel_formula": "=AB20-AB19",
        "dependencies": [
          "AB20",
          "AB19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AB20-AB19"
      },
      "AC22": {
        "excel_formula": "=AC20-AC19",
        "dependencies": [
          "AC20",
          "AC19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AC20-AC19"
      },
      "E23": {
        "excel_formula": "=E21-E19",
        "dependencies": [
          "E21",
          "E19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =E21-E19"
      },
      "F23": {
        "excel_formula": "=F21-F19",
        "dependencies": [
          "F21",
          "F19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =F21-F19"
      },
      "G23": {
        "excel_formula": "=G21-G19",
        "dependencies": [
          "G21",
          "G19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =G21-G19"
      },
      "H23": {
        "excel_formula": "=H21-H19",
        "dependencies": [
          "H21",
          "H19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =H21-H19"
      },
      "I23": {
        "excel_formula": "=I21-I19",
        "dependencies": [
          "I21",
          "I19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =I21-I19"
      },
      "J23": {
        "excel_formula": "=J21-J19",
        "dependencies": [
          "J21",
          "J19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =J21-J19"
      },
      "K23": {
        "excel_formula": "=K21-K19",
        "dependencies": [
          "K21",
          "K19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =K21-K19"
      },
      "L23": {
        "excel_formula": "=L21-L19",
        "dependencies": [
          "L21",
          "L19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =L21-L19"
      },
      "M23": {
        "excel_formula": "=M21-M19",
        "dependencies": [
          "M21",
          "M19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =M21-M19"
      },
      "N23": {
        "excel_formula": "=N21-N19",
        "dependencies": [
          "N21",
          "N19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =N21-N19"
      },
      "O23": {
        "excel_formula": "=O21-O19",
        "dependencies": [
          "O21",
          "O19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =O21-O19"
      },
      "P23": {
        "excel_formula": "=P21-P19",
        "dependencies": [
          "P21",
          "P19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =P21-P19"
      },
      "Q23": {
        "excel_formula": "=Q21-Q19",
        "dependencies": [
          "Q21",
          "Q19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Q21-Q19"
      },
      "R23": {
        "excel_formula": "=R21-R19",
        "dependencies": [
          "R21",
          "R19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =R21-R19"
      },
      "S23": {
        "excel_formula": "=S21-S19",
        "dependencies": [
          "S21",
          "S19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =S21-S19"
      },
      "T23": {
        "excel_formula": "=T21-T19",
        "dependencies": [
          "T21",
          "T19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =T21-T19"
      },
      "U23": {
        "excel_formula": "=U21-U19",
        "dependencies": [
          "U21",
          "U19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =U21-U19"
      },
      "V23": {
        "excel_formula": "=V21-V19",
        "dependencies": [
          "V21",
          "V19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =V21-V19"
      },
      "W23": {
        "excel_formula": "=W21-W19",
        "dependencies": [
          "W21",
          "W19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =W21-W19"
      },
      "X23": {
        "excel_formula": "=X21-X19",
        "dependencies": [
          "X21",
          "X19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =X21-X19"
      },
      "Y23": {
        "excel_formula": "=Y21-Y19",
        "dependencies": [
          "Y21",
          "Y19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Y21-Y19"
      },
      "Z23": {
        "excel_formula": "=Z21-Z19",
        "dependencies": [
          "Z21",
          "Z19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Z21-Z19"
      },
      "AA23": {
        "excel_formula": "=AA21-AA19",
        "dependencies": [
          "AA21",
          "AA19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AA21-AA19"
      },
      "AB23": {
        "excel_formula": "=AB21-AB19",
        "dependencies": [
          "AB21",
          "AB19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AB21-AB19"
      },
      "AC23": {
        "excel_formula": "=AC21-AC19",
        "dependencies": [
          "AC21",
          "AC19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AC21-AC19"
      },
      "E26": {
        "excel_formula": "=E19-$Q$19",
        "dependencies": [
          "E19",
          "$Q$19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =E19-$Q$19"
      },
      "F26": {
        "excel_formula": "=F19-$Q$19",
        "dependencies": [
          "F19",
          "$Q$19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =F19-$Q$19"
      },
      "G26": {
        "excel_formula": "=G19-$Q$19",
        "dependencies": [
          "G19",
          "$Q$19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =G19-$Q$19"
      },
      "H26": {
        "excel_formula": "=H19-$Q$19",
        "dependencies": [
          "H19",
          "$Q$19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =H19-$Q$19"
      },
      "I26": {
        "excel_formula": "=I19-$Q$19",
        "dependencies": [
          "I19",
          "$Q$19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =I19-$Q$19"
      },
      "J26": {
        "excel_formula": "=J19-$Q$19",
        "dependencies": [
          "J19",
          "$Q$19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =J19-$Q$19"
      },
      "K26": {
        "excel_formula": "=K19-$Q$19",
        "dependencies": [
          "K19",
          "$Q$19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =K19-$Q$19"
      },
      "L26": {
        "excel_formula": "=L19-$Q$19",
        "dependencies": [
          "L19",
          "$Q$19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =L19-$Q$19"
      },
      "M26": {
        "excel_formula": "=M19-$Q$19",
        "dependencies": [
          "M19",
          "$Q$19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =M19-$Q$19"
      },
      "N26": {
        "excel_formula": "=N19-$Q$19",
        "dependencies": [
          "N19",
          "$Q$19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =N19-$Q$19"
      },
      "O26": {
        "excel_formula": "=O19-$Q$19",
        "dependencies": [
          "O19",
          "$Q$19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =O19-$Q$19"
      },
      "P26": {
        "excel_formula": "=P19-$Q$19",
        "dependencies": [
          "P19",
          "$Q$19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =P19-$Q$19"
      },
      "Q26": {
        "excel_formula": "=Q19-$Q$19",
        "dependencies": [
          "Q19",
          "$Q$19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Q19-$Q$19"
      },
      "R26": {
        "excel_formula": "=R19-$Q$19",
        "dependencies": [
          "R19",
          "$Q$19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =R19-$Q$19"
      },
      "S26": {
        "excel_formula": "=S19-$Q$19",
        "dependencies": [
          "S19",
          "$Q$19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =S19-$Q$19"
      },
      "T26": {
        "excel_formula": "=T19-$Q$19",
        "dependencies": [
          "T19",
          "$Q$19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =T19-$Q$19"
      },
      "U26": {
        "excel_formula": "=U19-$Q$19",
        "dependencies": [
          "U19",
          "$Q$19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =U19-$Q$19"
      },
      "V26": {
        "excel_formula": "=V19-$Q$19",
        "dependencies": [
          "V19",
          "$Q$19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =V19-$Q$19"
      },
      "W26": {
        "excel_formula": "=W19-$Q$19",
        "dependencies": [
          "W19",
          "$Q$19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =W19-$Q$19"
      },
      "X26": {
        "excel_formula": "=X19-$Q$19",
        "dependencies": [
          "X19",
          "$Q$19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =X19-$Q$19"
      },
      "Y26": {
        "excel_formula": "=Y19-$Q$19",
        "dependencies": [
          "Y19",
          "$Q$19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Y19-$Q$19"
      },
      "Z26": {
        "excel_formula": "=Z19-$Q$19",
        "dependencies": [
          "Z19",
          "$Q$19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Z19-$Q$19"
      },
      "AA26": {
        "excel_formula": "=AA19-$Q$19",
        "dependencies": [
          "AA19",
          "$Q$19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AA19-$Q$19"
      },
      "AB26": {
        "excel_formula": "=AB19-$Q$19",
        "dependencies": [
          "AB19",
          "$Q$19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AB19-$Q$19"
      },
      "AC26": {
        "excel_formula": "=AC19-$Q$19",
        "dependencies": [
          "AC19",
          "$Q$19"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AC19-$Q$19"
      },
      "E27": {
        "excel_formula": "=E20-$Q$20",
        "dependencies": [
          "E20",
          "$Q$20"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =E20-$Q$20"
      },
      "F27": {
        "excel_formula": "=F20-$Q$20",
        "dependencies": [
          "F20",
          "$Q$20"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =F20-$Q$20"
      },
      "G27": {
        "excel_formula": "=G20-$Q$20",
        "dependencies": [
          "G20",
          "$Q$20"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =G20-$Q$20"
      },
      "H27": {
        "excel_formula": "=H20-$Q$20",
        "dependencies": [
          "H20",
          "$Q$20"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =H20-$Q$20"
      },
      "I27": {
        "excel_formula": "=I20-$Q$20",
        "dependencies": [
          "I20",
          "$Q$20"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =I20-$Q$20"
      },
      "J27": {
        "excel_formula": "=J20-$Q$20",
        "dependencies": [
          "J20",
          "$Q$20"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =J20-$Q$20"
      },
      "K27": {
        "excel_formula": "=K20-$Q$20",
        "dependencies": [
          "K20",
          "$Q$20"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =K20-$Q$20"
      },
      "L27": {
        "excel_formula": "=L20-$Q$20",
        "dependencies": [
          "L20",
          "$Q$20"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =L20-$Q$20"
      },
      "M27": {
        "excel_formula": "=M20-$Q$20",
        "dependencies": [
          "M20",
          "$Q$20"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =M20-$Q$20"
      },
      "N27": {
        "excel_formula": "=N20-$Q$20",
        "dependencies": [
          "N20",
          "$Q$20"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =N20-$Q$20"
      },
      "O27": {
        "excel_formula": "=O20-$Q$20",
        "dependencies": [
          "O20",
          "$Q$20"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =O20-$Q$20"
      },
      "P27": {
        "excel_formula": "=P20-$Q$20",
        "dependencies": [
          "P20",
          "$Q$20"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =P20-$Q$20"
      },
      "Q27": {
        "excel_formula": "=Q20-$Q$20",
        "dependencies": [
          "Q20",
          "$Q$20"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Q20-$Q$20"
      },
      "R27": {
        "excel_formula": "=R20-$Q$20",
        "dependencies": [
          "R20",
          "$Q$20"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =R20-$Q$20"
      },
      "S27": {
        "excel_formula": "=S20-$Q$20",
        "dependencies": [
          "S20",
          "$Q$20"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =S20-$Q$20"
      },
      "T27": {
        "excel_formula": "=T20-$Q$20",
        "dependencies": [
          "T20",
          "$Q$20"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =T20-$Q$20"
      },
      "U27": {
        "excel_formula": "=U20-$Q$20",
        "dependencies": [
          "U20",
          "$Q$20"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =U20-$Q$20"
      },
      "V27": {
        "excel_formula": "=V20-$Q$20",
        "dependencies": [
          "V20",
          "$Q$20"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =V20-$Q$20"
      },
      "W27": {
        "excel_formula": "=W20-$Q$20",
        "dependencies": [
          "W20",
          "$Q$20"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =W20-$Q$20"
      },
      "X27": {
        "excel_formula": "=X20-$Q$20",
        "dependencies": [
          "X20",
          "$Q$20"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =X20-$Q$20"
      },
      "Y27": {
        "excel_formula": "=Y20-$Q$20",
        "dependencies": [
          "Y20",
          "$Q$20"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Y20-$Q$20"
      },
      "Z27": {
        "excel_formula": "=Z20-$Q$20",
        "dependencies": [
          "Z20",
          "$Q$20"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Z20-$Q$20"
      },
      "AA27": {
        "excel_formula": "=AA20-$Q$20",
        "dependencies": [
          "AA20",
          "$Q$20"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AA20-$Q$20"
      },
      "AB27": {
        "excel_formula": "=AB20-$Q$20",
        "dependencies": [
          "AB20",
          "$Q$20"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AB20-$Q$20"
      },
      "AC27": {
        "excel_formula": "=AC20-$Q$20",
        "dependencies": [
          "AC20",
          "$Q$20"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AC20-$Q$20"
      },
      "E28": {
        "excel_formula": "=E21-$Q$21",
        "dependencies": [
          "E21",
          "$Q$21"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =E21-$Q$21"
      },
      "F28": {
        "excel_formula": "=F21-$Q$21",
        "dependencies": [
          "F21",
          "$Q$21"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =F21-$Q$21"
      },
      "G28": {
        "excel_formula": "=G21-$Q$21",
        "dependencies": [
          "G21",
          "$Q$21"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =G21-$Q$21"
      },
      "H28": {
        "excel_formula": "=H21-$Q$21",
        "dependencies": [
          "H21",
          "$Q$21"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =H21-$Q$21"
      },
      "I28": {
        "excel_formula": "=I21-$Q$21",
        "dependencies": [
          "I21",
          "$Q$21"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =I21-$Q$21"
      },
      "J28": {
        "excel_formula": "=J21-$Q$21",
        "dependencies": [
          "J21",
          "$Q$21"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =J21-$Q$21"
      },
      "K28": {
        "excel_formula": "=K21-$Q$21",
        "dependencies": [
          "K21",
          "$Q$21"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =K21-$Q$21"
      },
      "L28": {
        "excel_formula": "=L21-$Q$21",
        "dependencies": [
          "L21",
          "$Q$21"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =L21-$Q$21"
      },
      "M28": {
        "excel_formula": "=M21-$Q$21",
        "dependencies": [
          "M21",
          "$Q$21"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =M21-$Q$21"
      },
      "N28": {
        "excel_formula": "=N21-$Q$21",
        "dependencies": [
          "N21",
          "$Q$21"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =N21-$Q$21"
      },
      "O28": {
        "excel_formula": "=O21-$Q$21",
        "dependencies": [
          "O21",
          "$Q$21"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =O21-$Q$21"
      },
      "P28": {
        "excel_formula": "=P21-$Q$21",
        "dependencies": [
          "P21",
          "$Q$21"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =P21-$Q$21"
      },
      "Q28": {
        "excel_formula": "=Q21-$Q$21",
        "dependencies": [
          "Q21",
          "$Q$21"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Q21-$Q$21"
      },
      "R28": {
        "excel_formula": "=R21-$Q$21",
        "dependencies": [
          "R21",
          "$Q$21"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =R21-$Q$21"
      },
      "S28": {
        "excel_formula": "=S21-$Q$21",
        "dependencies": [
          "S21",
          "$Q$21"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =S21-$Q$21"
      },
      "T28": {
        "excel_formula": "=T21-$Q$21",
        "dependencies": [
          "T21",
          "$Q$21"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =T21-$Q$21"
      },
      "U28": {
        "excel_formula": "=U21-$Q$21",
        "dependencies": [
          "U21",
          "$Q$21"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =U21-$Q$21"
      },
      "V28": {
        "excel_formula": "=V21-$Q$21",
        "dependencies": [
          "V21",
          "$Q$21"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =V21-$Q$21"
      },
      "W28": {
        "excel_formula": "=W21-$Q$21",
        "dependencies": [
          "W21",
          "$Q$21"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =W21-$Q$21"
      },
      "X28": {
        "excel_formula": "=X21-$Q$21",
        "dependencies": [
          "X21",
          "$Q$21"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =X21-$Q$21"
      },
      "Y28": {
        "excel_formula": "=Y21-$Q$21",
        "dependencies": [
          "Y21",
          "$Q$21"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Y21-$Q$21"
      },
      "Z28": {
        "excel_formula": "=Z21-$Q$21",
        "dependencies": [
          "Z21",
          "$Q$21"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Z21-$Q$21"
      },
      "AA28": {
        "excel_formula": "=AA21-$Q$21",
        "dependencies": [
          "AA21",
          "$Q$21"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AA21-$Q$21"
      },
      "AB28": {
        "excel_formula": "=AB21-$Q$21",
        "dependencies": [
          "AB21",
          "$Q$21"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AB21-$Q$21"
      },
      "AC28": {
        "excel_formula": "=AC21-$Q$21",
        "dependencies": [
          "AC21",
          "$Q$21"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AC21-$Q$21"
      },
      "E29": {
        "excel_formula": "=E27-E26",
        "dependencies": [
          "E27",
          "E26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =E27-E26"
      },
      "F29": {
        "excel_formula": "=F27-F26",
        "dependencies": [
          "F27",
          "F26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =F27-F26"
      },
      "G29": {
        "excel_formula": "=G27-G26",
        "dependencies": [
          "G27",
          "G26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =G27-G26"
      },
      "H29": {
        "excel_formula": "=H27-H26",
        "dependencies": [
          "H27",
          "H26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =H27-H26"
      },
      "I29": {
        "excel_formula": "=I27-I26",
        "dependencies": [
          "I27",
          "I26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =I27-I26"
      },
      "J29": {
        "excel_formula": "=J27-J26",
        "dependencies": [
          "J27",
          "J26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =J27-J26"
      },
      "K29": {
        "excel_formula": "=K27-K26",
        "dependencies": [
          "K27",
          "K26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =K27-K26"
      },
      "L29": {
        "excel_formula": "=L27-L26",
        "dependencies": [
          "L27",
          "L26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =L27-L26"
      },
      "M29": {
        "excel_formula": "=M27-M26",
        "dependencies": [
          "M27",
          "M26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =M27-M26"
      },
      "N29": {
        "excel_formula": "=N27-N26",
        "dependencies": [
          "N27",
          "N26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =N27-N26"
      },
      "O29": {
        "excel_formula": "=O27-O26",
        "dependencies": [
          "O27",
          "O26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =O27-O26"
      },
      "P29": {
        "excel_formula": "=P27-P26",
        "dependencies": [
          "P27",
          "P26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =P27-P26"
      },
      "Q29": {
        "excel_formula": "=Q27-Q26",
        "dependencies": [
          "Q27",
          "Q26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Q27-Q26"
      },
      "R29": {
        "excel_formula": "=R27-R26",
        "dependencies": [
          "R27",
          "R26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =R27-R26"
      },
      "S29": {
        "excel_formula": "=S27-S26",
        "dependencies": [
          "S27",
          "S26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =S27-S26"
      },
      "T29": {
        "excel_formula": "=T27-T26",
        "dependencies": [
          "T27",
          "T26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =T27-T26"
      },
      "U29": {
        "excel_formula": "=U27-U26",
        "dependencies": [
          "U27",
          "U26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =U27-U26"
      },
      "V29": {
        "excel_formula": "=V27-V26",
        "dependencies": [
          "V27",
          "V26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =V27-V26"
      },
      "W29": {
        "excel_formula": "=W27-W26",
        "dependencies": [
          "W27",
          "W26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =W27-W26"
      },
      "X29": {
        "excel_formula": "=X27-X26",
        "dependencies": [
          "X27",
          "X26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =X27-X26"
      },
      "Y29": {
        "excel_formula": "=Y27-Y26",
        "dependencies": [
          "Y27",
          "Y26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Y27-Y26"
      },
      "Z29": {
        "excel_formula": "=Z27-Z26",
        "dependencies": [
          "Z27",
          "Z26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Z27-Z26"
      },
      "AA29": {
        "excel_formula": "=AA27-AA26",
        "dependencies": [
          "AA27",
          "AA26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AA27-AA26"
      },
      "AB29": {
        "excel_formula": "=AB27-AB26",
        "dependencies": [
          "AB27",
          "AB26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AB27-AB26"
      },
      "AC29": {
        "excel_formula": "=AC27-AC26",
        "dependencies": [
          "AC27",
          "AC26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AC27-AC26"
      },
      "E30": {
        "excel_formula": "=E28-E26",
        "dependencies": [
          "E28",
          "E26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =E28-E26"
      },
      "F30": {
        "excel_formula": "=F28-F26",
        "dependencies": [
          "F28",
          "F26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =F28-F26"
      },
      "G30": {
        "excel_formula": "=G28-G26",
        "dependencies": [
          "G28",
          "G26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =G28-G26"
      },
      "H30": {
        "excel_formula": "=H28-H26",
        "dependencies": [
          "H28",
          "H26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =H28-H26"
      },
      "I30": {
        "excel_formula": "=I28-I26",
        "dependencies": [
          "I28",
          "I26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =I28-I26"
      },
      "J30": {
        "excel_formula": "=J28-J26",
        "dependencies": [
          "J28",
          "J26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =J28-J26"
      },
      "K30": {
        "excel_formula": "=K28-K26",
        "dependencies": [
          "K28",
          "K26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =K28-K26"
      },
      "L30": {
        "excel_formula": "=L28-L26",
        "dependencies": [
          "L28",
          "L26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =L28-L26"
      },
      "M30": {
        "excel_formula": "=M28-M26",
        "dependencies": [
          "M28",
          "M26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =M28-M26"
      },
      "N30": {
        "excel_formula": "=N28-N26",
        "dependencies": [
          "N28",
          "N26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =N28-N26"
      },
      "O30": {
        "excel_formula": "=O28-O26",
        "dependencies": [
          "O28",
          "O26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =O28-O26"
      },
      "P30": {
        "excel_formula": "=P28-P26",
        "dependencies": [
          "P28",
          "P26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =P28-P26"
      },
      "Q30": {
        "excel_formula": "=Q28-Q26",
        "dependencies": [
          "Q28",
          "Q26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Q28-Q26"
      },
      "R30": {
        "excel_formula": "=R28-R26",
        "dependencies": [
          "R28",
          "R26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =R28-R26"
      },
      "S30": {
        "excel_formula": "=S28-S26",
        "dependencies": [
          "S28",
          "S26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =S28-S26"
      },
      "T30": {
        "excel_formula": "=T28-T26",
        "dependencies": [
          "T28",
          "T26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =T28-T26"
      },
      "U30": {
        "excel_formula": "=U28-U26",
        "dependencies": [
          "U28",
          "U26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =U28-U26"
      },
      "V30": {
        "excel_formula": "=V28-V26",
        "dependencies": [
          "V28",
          "V26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =V28-V26"
      },
      "W30": {
        "excel_formula": "=W28-W26",
        "dependencies": [
          "W28",
          "W26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =W28-W26"
      },
      "X30": {
        "excel_formula": "=X28-X26",
        "dependencies": [
          "X28",
          "X26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =X28-X26"
      },
      "Y30": {
        "excel_formula": "=Y28-Y26",
        "dependencies": [
          "Y28",
          "Y26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Y28-Y26"
      },
      "Z30": {
        "excel_formula": "=Z28-Z26",
        "dependencies": [
          "Z28",
          "Z26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Z28-Z26"
      },
      "AA30": {
        "excel_formula": "=AA28-AA26",
        "dependencies": [
          "AA28",
          "AA26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AA28-AA26"
      },
      "AB30": {
        "excel_formula": "=AB28-AB26",
        "dependencies": [
          "AB28",
          "AB26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AB28-AB26"
      },
      "AC30": {
        "excel_formula": "=AC28-AC26",
        "dependencies": [
          "AC28",
          "AC26"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AC28-AC26"
      }
    },
    "put_analysis": {
      "E33": {
        "excel_formula": "=E15",
        "dependencies": [
          "E15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =E15"
      },
      "F33": {
        "excel_formula": "=F15",
        "dependencies": [
          "F15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =F15"
      },
      "G33": {
        "excel_formula": "=G15",
        "dependencies": [
          "G15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =G15"
      },
      "H33": {
        "excel_formula": "=H15",
        "dependencies": [
          "H15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =H15"
      },
      "I33": {
        "excel_formula": "=I15",
        "dependencies": [
          "I15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =I15"
      },
      "J33": {
        "excel_formula": "=J15",
        "dependencies": [
          "J15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =J15"
      },
      "K33": {
        "excel_formula": "=K15",
        "dependencies": [
          "K15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =K15"
      },
      "L33": {
        "excel_formula": "=L15",
        "dependencies": [
          "L15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =L15"
      },
      "M33": {
        "excel_formula": "=M15",
        "dependencies": [
          "M15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =M15"
      },
      "N33": {
        "excel_formula": "=N15",
        "dependencies": [
          "N15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =N15"
      },
      "O33": {
        "excel_formula": "=O15",
        "dependencies": [
          "O15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =O15"
      },
      "P33": {
        "excel_formula": "=P15",
        "dependencies": [
          "P15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =P15"
      },
      "Q33": {
        "excel_formula": "=Q15",
        "dependencies": [
          "Q15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Q15"
      },
      "R33": {
        "excel_formula": "=R15",
        "dependencies": [
          "R15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =R15"
      },
      "S33": {
        "excel_formula": "=S15",
        "dependencies": [
          "S15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =S15"
      },
      "T33": {
        "excel_formula": "=T15",
        "dependencies": [
          "T15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =T15"
      },
      "U33": {
        "excel_formula": "=U15",
        "dependencies": [
          "U15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =U15"
      },
      "V33": {
        "excel_formula": "=V15",
        "dependencies": [
          "V15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =V15"
      },
      "W33": {
        "excel_formula": "=W15",
        "dependencies": [
          "W15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =W15"
      },
      "X33": {
        "excel_formula": "=X15",
        "dependencies": [
          "X15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =X15"
      },
      "Y33": {
        "excel_formula": "=Y15",
        "dependencies": [
          "Y15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Y15"
      },
      "Z33": {
        "excel_formula": "=Z15",
        "dependencies": [
          "Z15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Z15"
      },
      "AA33": {
        "excel_formula": "=AA15",
        "dependencies": [
          "AA15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AA15"
      },
      "AB33": {
        "excel_formula": "=AB15",
        "dependencies": [
          "AB15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AB15"
      },
      "AC33": {
        "excel_formula": "=AC15",
        "dependencies": [
          "AC15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AC15"
      },
      "E34": {
        "excel_formula": "=$Q$34+$Q$5*(E32-$Q$32)+0.5*$Q$6*(E32-$Q$32)*(E32-$Q$32)",
        "dependencies": [
          "$Q$34",
          "$Q$5",
          "E32",
          "$Q$32",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$34+$Q$5*(E32-$Q$32)+0.5*$Q$6*(E32-$Q$32)*(E32-$Q$32)"
      },
      "F34": {
        "excel_formula": "=$Q$34+$Q$5*(F32-$Q$32)+0.5*$Q$6*(F32-$Q$32)*(F32-$Q$32)",
        "dependencies": [
          "$Q$34",
          "$Q$5",
          "F32",
          "$Q$32",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$34+$Q$5*(F32-$Q$32)+0.5*$Q$6*(F32-$Q$32)*(F32-$Q$32)"
      },
      "G34": {
        "excel_formula": "=$Q$34+$Q$5*(G32-$Q$32)+0.5*$Q$6*(G32-$Q$32)*(G32-$Q$32)",
        "dependencies": [
          "$Q$34",
          "$Q$5",
          "G32",
          "$Q$32",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$34+$Q$5*(G32-$Q$32)+0.5*$Q$6*(G32-$Q$32)*(G32-$Q$32)"
      },
      "H34": {
        "excel_formula": "=$Q$34+$Q$5*(H32-$Q$32)+0.5*$Q$6*(H32-$Q$32)*(H32-$Q$32)",
        "dependencies": [
          "$Q$34",
          "$Q$5",
          "H32",
          "$Q$32",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$34+$Q$5*(H32-$Q$32)+0.5*$Q$6*(H32-$Q$32)*(H32-$Q$32)"
      },
      "I34": {
        "excel_formula": "=$Q$34+$Q$5*(I32-$Q$32)+0.5*$Q$6*(I32-$Q$32)*(I32-$Q$32)",
        "dependencies": [
          "$Q$34",
          "$Q$5",
          "I32",
          "$Q$32",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$34+$Q$5*(I32-$Q$32)+0.5*$Q$6*(I32-$Q$32)*(I32-$Q$32)"
      },
      "J34": {
        "excel_formula": "=$Q$34+$Q$5*(J32-$Q$32)+0.5*$Q$6*(J32-$Q$32)*(J32-$Q$32)",
        "dependencies": [
          "$Q$34",
          "$Q$5",
          "J32",
          "$Q$32",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$34+$Q$5*(J32-$Q$32)+0.5*$Q$6*(J32-$Q$32)*(J32-$Q$32)"
      },
      "K34": {
        "excel_formula": "=$Q$34+$Q$5*(K32-$Q$32)+0.5*$Q$6*(K32-$Q$32)*(K32-$Q$32)",
        "dependencies": [
          "$Q$34",
          "$Q$5",
          "K32",
          "$Q$32",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$34+$Q$5*(K32-$Q$32)+0.5*$Q$6*(K32-$Q$32)*(K32-$Q$32)"
      },
      "L34": {
        "excel_formula": "=$Q$34+$Q$5*(L32-$Q$32)+0.5*$Q$6*(L32-$Q$32)*(L32-$Q$32)",
        "dependencies": [
          "$Q$34",
          "$Q$5",
          "L32",
          "$Q$32",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$34+$Q$5*(L32-$Q$32)+0.5*$Q$6*(L32-$Q$32)*(L32-$Q$32)"
      },
      "M34": {
        "excel_formula": "=$Q$34+$Q$5*(M32-$Q$32)+0.5*$Q$6*(M32-$Q$32)*(M32-$Q$32)",
        "dependencies": [
          "$Q$34",
          "$Q$5",
          "M32",
          "$Q$32",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$34+$Q$5*(M32-$Q$32)+0.5*$Q$6*(M32-$Q$32)*(M32-$Q$32)"
      },
      "N34": {
        "excel_formula": "=$Q$34+$Q$5*(N32-$Q$32)+0.5*$Q$6*(N32-$Q$32)*(N32-$Q$32)",
        "dependencies": [
          "$Q$34",
          "$Q$5",
          "N32",
          "$Q$32",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$34+$Q$5*(N32-$Q$32)+0.5*$Q$6*(N32-$Q$32)*(N32-$Q$32)"
      },
      "O34": {
        "excel_formula": "=$Q$34+$Q$5*(O32-$Q$32)+0.5*$Q$6*(O32-$Q$32)*(O32-$Q$32)",
        "dependencies": [
          "$Q$34",
          "$Q$5",
          "O32",
          "$Q$32",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$34+$Q$5*(O32-$Q$32)+0.5*$Q$6*(O32-$Q$32)*(O32-$Q$32)"
      },
      "P34": {
        "excel_formula": "=$Q$34+$Q$5*(P32-$Q$32)+0.5*$Q$6*(P32-$Q$32)*(P32-$Q$32)",
        "dependencies": [
          "$Q$34",
          "$Q$5",
          "P32",
          "$Q$32",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$34+$Q$5*(P32-$Q$32)+0.5*$Q$6*(P32-$Q$32)*(P32-$Q$32)"
      },
      "Q34": {
        "excel_formula": "=Q15",
        "dependencies": [
          "Q15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Q15"
      },
      "R34": {
        "excel_formula": "=$Q$34+$Q$5*(R32-$Q$32)+0.5*$Q$6*(R32-$Q$32)*(R32-$Q$32)",
        "dependencies": [
          "$Q$34",
          "$Q$5",
          "R32",
          "$Q$32",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$34+$Q$5*(R32-$Q$32)+0.5*$Q$6*(R32-$Q$32)*(R32-$Q$32)"
      },
      "S34": {
        "excel_formula": "=$Q$34+$Q$5*(S32-$Q$32)+0.5*$Q$6*(S32-$Q$32)*(S32-$Q$32)",
        "dependencies": [
          "$Q$34",
          "$Q$5",
          "S32",
          "$Q$32",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$34+$Q$5*(S32-$Q$32)+0.5*$Q$6*(S32-$Q$32)*(S32-$Q$32)"
      },
      "T34": {
        "excel_formula": "=$Q$34+$Q$5*(T32-$Q$32)+0.5*$Q$6*(T32-$Q$32)*(T32-$Q$32)",
        "dependencies": [
          "$Q$34",
          "$Q$5",
          "T32",
          "$Q$32",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$34+$Q$5*(T32-$Q$32)+0.5*$Q$6*(T32-$Q$32)*(T32-$Q$32)"
      },
      "U34": {
        "excel_formula": "=$Q$34+$Q$5*(U32-$Q$32)+0.5*$Q$6*(U32-$Q$32)*(U32-$Q$32)",
        "dependencies": [
          "$Q$34",
          "$Q$5",
          "U32",
          "$Q$32",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$34+$Q$5*(U32-$Q$32)+0.5*$Q$6*(U32-$Q$32)*(U32-$Q$32)"
      },
      "V34": {
        "excel_formula": "=$Q$34+$Q$5*(V32-$Q$32)+0.5*$Q$6*(V32-$Q$32)*(V32-$Q$32)",
        "dependencies": [
          "$Q$34",
          "$Q$5",
          "V32",
          "$Q$32",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$34+$Q$5*(V32-$Q$32)+0.5*$Q$6*(V32-$Q$32)*(V32-$Q$32)"
      },
      "W34": {
        "excel_formula": "=$Q$34+$Q$5*(W32-$Q$32)+0.5*$Q$6*(W32-$Q$32)*(W32-$Q$32)",
        "dependencies": [
          "$Q$34",
          "$Q$5",
          "W32",
          "$Q$32",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$34+$Q$5*(W32-$Q$32)+0.5*$Q$6*(W32-$Q$32)*(W32-$Q$32)"
      },
      "X34": {
        "excel_formula": "=$Q$34+$Q$5*(X32-$Q$32)+0.5*$Q$6*(X32-$Q$32)*(X32-$Q$32)",
        "dependencies": [
          "$Q$34",
          "$Q$5",
          "X32",
          "$Q$32",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$34+$Q$5*(X32-$Q$32)+0.5*$Q$6*(X32-$Q$32)*(X32-$Q$32)"
      },
      "Y34": {
        "excel_formula": "=$Q$34+$Q$5*(Y32-$Q$32)+0.5*$Q$6*(Y32-$Q$32)*(Y32-$Q$32)",
        "dependencies": [
          "$Q$34",
          "$Q$5",
          "Y32",
          "$Q$32",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$34+$Q$5*(Y32-$Q$32)+0.5*$Q$6*(Y32-$Q$32)*(Y32-$Q$32)"
      },
      "Z34": {
        "excel_formula": "=$Q$34+$Q$5*(Z32-$Q$32)+0.5*$Q$6*(Z32-$Q$32)*(Z32-$Q$32)",
        "dependencies": [
          "$Q$34",
          "$Q$5",
          "Z32",
          "$Q$32",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$34+$Q$5*(Z32-$Q$32)+0.5*$Q$6*(Z32-$Q$32)*(Z32-$Q$32)"
      },
      "AA34": {
        "excel_formula": "=$Q$34+$Q$5*(AA32-$Q$32)+0.5*$Q$6*(AA32-$Q$32)*(AA32-$Q$32)",
        "dependencies": [
          "$Q$34",
          "$Q$5",
          "AA32",
          "$Q$32",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$34+$Q$5*(AA32-$Q$32)+0.5*$Q$6*(AA32-$Q$32)*(AA32-$Q$32)"
      },
      "AB34": {
        "excel_formula": "=$Q$34+$Q$5*(AB32-$Q$32)+0.5*$Q$6*(AB32-$Q$32)*(AB32-$Q$32)",
        "dependencies": [
          "$Q$34",
          "$Q$5",
          "AB32",
          "$Q$32",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$34+$Q$5*(AB32-$Q$32)+0.5*$Q$6*(AB32-$Q$32)*(AB32-$Q$32)"
      },
      "AC34": {
        "excel_formula": "=$Q$34+$Q$5*(AC32-$Q$32)+0.5*$Q$6*(AC32-$Q$32)*(AC32-$Q$32)",
        "dependencies": [
          "$Q$34",
          "$Q$5",
          "AC32",
          "$Q$32",
          "$Q$6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =$Q$34+$Q$5*(AC32-$Q$32)+0.5*$Q$6*(AC32-$Q$32)*(AC32-$Q$32)"
      },
      "E35": {
        "excel_formula": "=F33+F5*(E32-F32)+0.5*F6*(E32-F32)*(E32-F32)",
        "dependencies": [
          "F33",
          "F5",
          "E32",
          "F32",
          "F6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =F33+F5*(E32-F32)+0.5*F6*(E32-F32)*(E32-F32)"
      },
      "F35": {
        "excel_formula": "=G33+G5*(F32-G32)+0.5*G6*(F32-G32)*(F32-G32)",
        "dependencies": [
          "G33",
          "G5",
          "F32",
          "G32",
          "G6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =G33+G5*(F32-G32)+0.5*G6*(F32-G32)*(F32-G32)"
      },
      "G35": {
        "excel_formula": "=H33+H5*(G32-H32)+0.5*H6*(G32-H32)*(G32-H32)",
        "dependencies": [
          "H33",
          "H5",
          "G32",
          "H32",
          "H6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =H33+H5*(G32-H32)+0.5*H6*(G32-H32)*(G32-H32)"
      },
      "H35": {
        "excel_formula": "=I33+I5*(H32-I32)+0.5*I6*(H32-I32)*(H32-I32)",
        "dependencies": [
          "I33",
          "I5",
          "H32",
          "I32",
          "I6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =I33+I5*(H32-I32)+0.5*I6*(H32-I32)*(H32-I32)"
      },
      "I35": {
        "excel_formula": "=J33+J5*(I32-J32)+0.5*J6*(I32-J32)*(I32-J32)",
        "dependencies": [
          "J33",
          "J5",
          "I32",
          "J32",
          "J6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =J33+J5*(I32-J32)+0.5*J6*(I32-J32)*(I32-J32)"
      },
      "J35": {
        "excel_formula": "=K33+K5*(J32-K32)+0.5*K6*(J32-K32)*(J32-K32)",
        "dependencies": [
          "K33",
          "K5",
          "J32",
          "K32",
          "K6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =K33+K5*(J32-K32)+0.5*K6*(J32-K32)*(J32-K32)"
      },
      "K35": {
        "excel_formula": "=L33+L5*(K32-L32)+0.5*L6*(K32-L32)*(K32-L32)",
        "dependencies": [
          "L33",
          "L5",
          "K32",
          "L32",
          "L6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =L33+L5*(K32-L32)+0.5*L6*(K32-L32)*(K32-L32)"
      },
      "L35": {
        "excel_formula": "=M33+M5*(L32-M32)+0.5*M6*(L32-M32)*(L32-M32)",
        "dependencies": [
          "M33",
          "M5",
          "L32",
          "M32",
          "M6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =M33+M5*(L32-M32)+0.5*M6*(L32-M32)*(L32-M32)"
      },
      "M35": {
        "excel_formula": "=N33+N5*(M32-N32)+0.5*N6*(M32-N32)*(M32-N32)",
        "dependencies": [
          "N33",
          "N5",
          "M32",
          "N32",
          "N6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =N33+N5*(M32-N32)+0.5*N6*(M32-N32)*(M32-N32)"
      },
      "N35": {
        "excel_formula": "=O33+O5*(N32-O32)+0.5*O6*(N32-O32)*(N32-O32)",
        "dependencies": [
          "O33",
          "O5",
          "N32",
          "O32",
          "O6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =O33+O5*(N32-O32)+0.5*O6*(N32-O32)*(N32-O32)"
      },
      "O35": {
        "excel_formula": "=P33+P5*(O32-P32)+0.5*P6*(O32-P32)*(O32-P32)",
        "dependencies": [
          "P33",
          "P5",
          "O32",
          "P32",
          "P6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =P33+P5*(O32-P32)+0.5*P6*(O32-P32)*(O32-P32)"
      },
      "P35": {
        "excel_formula": "=Q33+Q5*(P32-Q32)+0.5*Q6*(P32-Q32)*(P32-Q32)",
        "dependencies": [
          "Q33",
          "Q5",
          "P32",
          "Q32",
          "Q6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Q33+Q5*(P32-Q32)+0.5*Q6*(P32-Q32)*(P32-Q32)"
      },
      "Q35": {
        "excel_formula": "=Q15",
        "dependencies": [
          "Q15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Q15"
      },
      "R35": {
        "excel_formula": "=Q33+Q5*(R32-Q32)+0.5*Q6*(R32-Q32)*(R32-Q32)",
        "dependencies": [
          "Q33",
          "Q5",
          "R32",
          "Q32",
          "Q6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Q33+Q5*(R32-Q32)+0.5*Q6*(R32-Q32)*(R32-Q32)"
      },
      "S35": {
        "excel_formula": "=R33+R5*(S32-R32)+0.5*R6*(S32-R32)*(S32-R32)",
        "dependencies": [
          "R33",
          "R5",
          "S32",
          "R32",
          "R6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =R33+R5*(S32-R32)+0.5*R6*(S32-R32)*(S32-R32)"
      },
      "T35": {
        "excel_formula": "=S33+S5*(T32-S32)+0.5*S6*(T32-S32)*(T32-S32)",
        "dependencies": [
          "S33",
          "S5",
          "T32",
          "S32",
          "S6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =S33+S5*(T32-S32)+0.5*S6*(T32-S32)*(T32-S32)"
      },
      "U35": {
        "excel_formula": "=T33+T5*(U32-T32)+0.5*T6*(U32-T32)*(U32-T32)",
        "dependencies": [
          "T33",
          "T5",
          "U32",
          "T32",
          "T6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =T33+T5*(U32-T32)+0.5*T6*(U32-T32)*(U32-T32)"
      },
      "V35": {
        "excel_formula": "=U33+U5*(V32-U32)+0.5*U6*(V32-U32)*(V32-U32)",
        "dependencies": [
          "U33",
          "U5",
          "V32",
          "U32",
          "U6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =U33+U5*(V32-U32)+0.5*U6*(V32-U32)*(V32-U32)"
      },
      "W35": {
        "excel_formula": "=V33+V5*(W32-V32)+0.5*V6*(W32-V32)*(W32-V32)",
        "dependencies": [
          "V33",
          "V5",
          "W32",
          "V32",
          "V6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =V33+V5*(W32-V32)+0.5*V6*(W32-V32)*(W32-V32)"
      },
      "X35": {
        "excel_formula": "=W33+W5*(X32-W32)+0.5*W6*(X32-W32)*(X32-W32)",
        "dependencies": [
          "W33",
          "W5",
          "X32",
          "W32",
          "W6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =W33+W5*(X32-W32)+0.5*W6*(X32-W32)*(X32-W32)"
      },
      "Y35": {
        "excel_formula": "=X33+X5*(Y32-X32)+0.5*X6*(Y32-X32)*(Y32-X32)",
        "dependencies": [
          "X33",
          "X5",
          "Y32",
          "X32",
          "X6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =X33+X5*(Y32-X32)+0.5*X6*(Y32-X32)*(Y32-X32)"
      },
      "Z35": {
        "excel_formula": "=Y33+Y5*(Z32-Y32)+0.5*Y6*(Z32-Y32)*(Z32-Y32)",
        "dependencies": [
          "Y33",
          "Y5",
          "Z32",
          "Y32",
          "Y6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Y33+Y5*(Z32-Y32)+0.5*Y6*(Z32-Y32)*(Z32-Y32)"
      },
      "AA35": {
        "excel_formula": "=Z33+Z5*(AA32-Z32)+0.5*Z6*(AA32-Z32)*(AA32-Z32)",
        "dependencies": [
          "Z33",
          "Z5",
          "AA32",
          "Z32",
          "Z6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Z33+Z5*(AA32-Z32)+0.5*Z6*(AA32-Z32)*(AA32-Z32)"
      },
      "AB35": {
        "excel_formula": "=AA33+AA5*(AB32-AA32)+0.5*AA6*(AB32-AA32)*(AB32-AA32)",
        "dependencies": [
          "AA33",
          "AA5",
          "AB32",
          "AA32",
          "AA6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AA33+AA5*(AB32-AA32)+0.5*AA6*(AB32-AA32)*(AB32-AA32)"
      },
      "AC35": {
        "excel_formula": "=AB33+AB5*(AC32-AB32)+0.5*AB6*(AC32-AB32)*(AC32-AB32)",
        "dependencies": [
          "AB33",
          "AB5",
          "AC32",
          "AB32",
          "AB6"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AB33+AB5*(AC32-AB32)+0.5*AB6*(AC32-AB32)*(AC32-AB32)"
      },
      "E36": {
        "excel_formula": "=E34-E33",
        "dependencies": [
          "E34",
          "E33"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =E34-E33"
      },
      "F36": {
        "excel_formula": "=F34-F33",
        "dependencies": [
          "F34",
          "F33"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =F34-F33"
      },
      "G36": {
        "excel_formula": "=G34-G33",
        "dependencies": [
          "G34",
          "G33"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =G34-G33"
      },
      "H36": {
        "excel_formula": "=H34-H33",
        "dependencies": [
          "H34",
          "H33"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =H34-H33"
      },
      "I36": {
        "excel_formula": "=I34-I33",
        "dependencies": [
          "I34",
          "I33"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =I34-I33"
      },
      "J36": {
        "excel_formula": "=J34-J33",
        "dependencies": [
          "J34",
          "J33"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =J34-J33"
      },
      "K36": {
        "excel_formula": "=K34-K33",
        "dependencies": [
          "K34",
          "K33"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =K34-K33"
      },
      "L36": {
        "excel_formula": "=L34-L33",
        "dependencies": [
          "L34",
          "L33"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =L34-L33"
      },
      "M36": {
        "excel_formula": "=M34-M33",
        "dependencies": [
          "M34",
          "M33"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =M34-M33"
      },
      "N36": {
        "excel_formula": "=N34-N33",
        "dependencies": [
          "N34",
          "N33"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =N34-N33"
      },
      "O36": {
        "excel_formula": "=O34-O33",
        "dependencies": [
          "O34",
          "O33"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =O34-O33"
      },
      "P36": {
        "excel_formula": "=P34-P33",
        "dependencies": [
          "P34",
          "P33"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =P34-P33"
      },
      "Q36": {
        "excel_formula": "=Q34-Q33",
        "dependencies": [
          "Q34",
          "Q33"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Q34-Q33"
      },
      "R36": {
        "excel_formula": "=R34-R33",
        "dependencies": [
          "R34",
          "R33"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =R34-R33"
      },
      "S36": {
        "excel_formula": "=S34-S33",
        "dependencies": [
          "S34",
          "S33"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =S34-S33"
      },
      "T36": {
        "excel_formula": "=T34-T33",
        "dependencies": [
          "T34",
          "T33"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =T34-T33"
      },
      "U36": {
        "excel_formula": "=U34-U33",
        "dependencies": [
          "U34",
          "U33"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =U34-U33"
      },
      "V36": {
        "excel_formula": "=V34-V33",
        "dependencies": [
          "V34",
          "V33"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =V34-V33"
      },
      "W36": {
        "excel_formula": "=W34-W33",
        "dependencies": [
          "W34",
          "W33"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =W34-W33"
      },
      "X36": {
        "excel_formula": "=X34-X33",
        "dependencies": [
          "X34",
          "X33"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =X34-X33"
      },
      "Y36": {
        "excel_formula": "=Y34-Y33",
        "dependencies": [
          "Y34",
          "Y33"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Y34-Y33"
      },
      "Z36": {
        "excel_formula": "=Z34-Z33",
        "dependencies": [
          "Z34",
          "Z33"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Z34-Z33"
      },
      "AA36": {
        "excel_formula": "=AA34-AA33",
        "dependencies": [
          "AA34",
          "AA33"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AA34-AA33"
      },
      "AB36": {
        "excel_formula": "=AB34-AB33",
        "dependencies": [
          "AB34",
          "AB33"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AB34-AB33"
      },
      "AC36": {
        "excel_formula": "=AC34-AC33",
        "dependencies": [
          "AC34",
          "AC33"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AC34-AC33"
      },
      "E40": {
        "excel_formula": "=E15-$Q$15",
        "dependencies": [
          "E15",
          "$Q$15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =E15-$Q$15"
      },
      "F40": {
        "excel_formula": "=F15-$Q$15",
        "dependencies": [
          "F15",
          "$Q$15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =F15-$Q$15"
      },
      "G40": {
        "excel_formula": "=G15-$Q$15",
        "dependencies": [
          "G15",
          "$Q$15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =G15-$Q$15"
      },
      "H40": {
        "excel_formula": "=H15-$Q$15",
        "dependencies": [
          "H15",
          "$Q$15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =H15-$Q$15"
      },
      "I40": {
        "excel_formula": "=I15-$Q$15",
        "dependencies": [
          "I15",
          "$Q$15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =I15-$Q$15"
      },
      "J40": {
        "excel_formula": "=J15-$Q$15",
        "dependencies": [
          "J15",
          "$Q$15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =J15-$Q$15"
      },
      "K40": {
        "excel_formula": "=K15-$Q$15",
        "dependencies": [
          "K15",
          "$Q$15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =K15-$Q$15"
      },
      "L40": {
        "excel_formula": "=L15-$Q$15",
        "dependencies": [
          "L15",
          "$Q$15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =L15-$Q$15"
      },
      "M40": {
        "excel_formula": "=M15-$Q$15",
        "dependencies": [
          "M15",
          "$Q$15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =M15-$Q$15"
      },
      "N40": {
        "excel_formula": "=N15-$Q$15",
        "dependencies": [
          "N15",
          "$Q$15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =N15-$Q$15"
      },
      "O40": {
        "excel_formula": "=O15-$Q$15",
        "dependencies": [
          "O15",
          "$Q$15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =O15-$Q$15"
      },
      "P40": {
        "excel_formula": "=P15-$Q$15",
        "dependencies": [
          "P15",
          "$Q$15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =P15-$Q$15"
      },
      "Q40": {
        "excel_formula": "=Q15-$Q$15",
        "dependencies": [
          "Q15",
          "$Q$15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Q15-$Q$15"
      },
      "R40": {
        "excel_formula": "=R15-$Q$15",
        "dependencies": [
          "R15",
          "$Q$15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =R15-$Q$15"
      },
      "S40": {
        "excel_formula": "=S15-$Q$15",
        "dependencies": [
          "S15",
          "$Q$15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =S15-$Q$15"
      },
      "T40": {
        "excel_formula": "=T15-$Q$15",
        "dependencies": [
          "T15",
          "$Q$15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =T15-$Q$15"
      },
      "U40": {
        "excel_formula": "=U15-$Q$15",
        "dependencies": [
          "U15",
          "$Q$15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =U15-$Q$15"
      },
      "V40": {
        "excel_formula": "=V15-$Q$15",
        "dependencies": [
          "V15",
          "$Q$15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =V15-$Q$15"
      },
      "W40": {
        "excel_formula": "=W15-$Q$15",
        "dependencies": [
          "W15",
          "$Q$15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =W15-$Q$15"
      },
      "X40": {
        "excel_formula": "=X15-$Q$15",
        "dependencies": [
          "X15",
          "$Q$15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =X15-$Q$15"
      },
      "Y40": {
        "excel_formula": "=Y15-$Q$15",
        "dependencies": [
          "Y15",
          "$Q$15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Y15-$Q$15"
      },
      "Z40": {
        "excel_formula": "=Z15-$Q$15",
        "dependencies": [
          "Z15",
          "$Q$15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Z15-$Q$15"
      },
      "AA40": {
        "excel_formula": "=AA15-$Q$15",
        "dependencies": [
          "AA15",
          "$Q$15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AA15-$Q$15"
      },
      "AB40": {
        "excel_formula": "=AB15-$Q$15",
        "dependencies": [
          "AB15",
          "$Q$15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AB15-$Q$15"
      },
      "AC40": {
        "excel_formula": "=AC15-$Q$15",
        "dependencies": [
          "AC15",
          "$Q$15"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AC15-$Q$15"
      },
      "E41": {
        "excel_formula": "=E34-$Q$34",
        "dependencies": [
          "E34",
          "$Q$34"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =E34-$Q$34"
      },
      "F41": {
        "excel_formula": "=F34-$Q$34",
        "dependencies": [
          "F34",
          "$Q$34"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =F34-$Q$34"
      },
      "G41": {
        "excel_formula": "=G34-$Q$34",
        "dependencies": [
          "G34",
          "$Q$34"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =G34-$Q$34"
      },
      "H41": {
        "excel_formula": "=H34-$Q$34",
        "dependencies": [
          "H34",
          "$Q$34"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =H34-$Q$34"
      },
      "I41": {
        "excel_formula": "=I34-$Q$34",
        "dependencies": [
          "I34",
          "$Q$34"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =I34-$Q$34"
      },
      "J41": {
        "excel_formula": "=J34-$Q$34",
        "dependencies": [
          "J34",
          "$Q$34"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =J34-$Q$34"
      },
      "K41": {
        "excel_formula": "=K34-$Q$34",
        "dependencies": [
          "K34",
          "$Q$34"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =K34-$Q$34"
      },
      "L41": {
        "excel_formula": "=L34-$Q$34",
        "dependencies": [
          "L34",
          "$Q$34"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =L34-$Q$34"
      },
      "M41": {
        "excel_formula": "=M34-$Q$34",
        "dependencies": [
          "M34",
          "$Q$34"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =M34-$Q$34"
      },
      "N41": {
        "excel_formula": "=N34-$Q$34",
        "dependencies": [
          "N34",
          "$Q$34"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =N34-$Q$34"
      },
      "O41": {
        "excel_formula": "=O34-$Q$34",
        "dependencies": [
          "O34",
          "$Q$34"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =O34-$Q$34"
      },
      "P41": {
        "excel_formula": "=P34-$Q$34",
        "dependencies": [
          "P34",
          "$Q$34"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =P34-$Q$34"
      },
      "Q41": {
        "excel_formula": "=Q34-$Q$34",
        "dependencies": [
          "Q34",
          "$Q$34"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Q34-$Q$34"
      },
      "R41": {
        "excel_formula": "=R34-$Q$34",
        "dependencies": [
          "R34",
          "$Q$34"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =R34-$Q$34"
      },
      "S41": {
        "excel_formula": "=S34-$Q$34",
        "dependencies": [
          "S34",
          "$Q$34"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =S34-$Q$34"
      },
      "T41": {
        "excel_formula": "=T34-$Q$34",
        "dependencies": [
          "T34",
          "$Q$34"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =T34-$Q$34"
      },
      "U41": {
        "excel_formula": "=U34-$Q$34",
        "dependencies": [
          "U34",
          "$Q$34"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =U34-$Q$34"
      },
      "V41": {
        "excel_formula": "=V34-$Q$34",
        "dependencies": [
          "V34",
          "$Q$34"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =V34-$Q$34"
      },
      "W41": {
        "excel_formula": "=W34-$Q$34",
        "dependencies": [
          "W34",
          "$Q$34"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =W34-$Q$34"
      },
      "X41": {
        "excel_formula": "=X34-$Q$34",
        "dependencies": [
          "X34",
          "$Q$34"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =X34-$Q$34"
      },
      "Y41": {
        "excel_formula": "=Y34-$Q$34",
        "dependencies": [
          "Y34",
          "$Q$34"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Y34-$Q$34"
      },
      "Z41": {
        "excel_formula": "=Z34-$Q$34",
        "dependencies": [
          "Z34",
          "$Q$34"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Z34-$Q$34"
      },
      "AA41": {
        "excel_formula": "=AA34-$Q$34",
        "dependencies": [
          "AA34",
          "$Q$34"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AA34-$Q$34"
      },
      "AB41": {
        "excel_formula": "=AB34-$Q$34",
        "dependencies": [
          "AB34",
          "$Q$34"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AB34-$Q$34"
      },
      "AC41": {
        "excel_formula": "=AC34-$Q$34",
        "dependencies": [
          "AC34",
          "$Q$34"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AC34-$Q$34"
      },
      "E42": {
        "excel_formula": "=E35-$Q$35",
        "dependencies": [
          "E35",
          "$Q$35"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =E35-$Q$35"
      },
      "F42": {
        "excel_formula": "=F35-$Q$35",
        "dependencies": [
          "F35",
          "$Q$35"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =F35-$Q$35"
      },
      "G42": {
        "excel_formula": "=G35-$Q$35",
        "dependencies": [
          "G35",
          "$Q$35"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =G35-$Q$35"
      },
      "H42": {
        "excel_formula": "=H35-$Q$35",
        "dependencies": [
          "H35",
          "$Q$35"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =H35-$Q$35"
      },
      "I42": {
        "excel_formula": "=I35-$Q$35",
        "dependencies": [
          "I35",
          "$Q$35"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =I35-$Q$35"
      },
      "J42": {
        "excel_formula": "=J35-$Q$35",
        "dependencies": [
          "J35",
          "$Q$35"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =J35-$Q$35"
      },
      "K42": {
        "excel_formula": "=K35-$Q$35",
        "dependencies": [
          "K35",
          "$Q$35"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =K35-$Q$35"
      },
      "L42": {
        "excel_formula": "=L35-$Q$35",
        "dependencies": [
          "L35",
          "$Q$35"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =L35-$Q$35"
      },
      "M42": {
        "excel_formula": "=M35-$Q$35",
        "dependencies": [
          "M35",
          "$Q$35"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =M35-$Q$35"
      },
      "N42": {
        "excel_formula": "=N35-$Q$35",
        "dependencies": [
          "N35",
          "$Q$35"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =N35-$Q$35"
      },
      "O42": {
        "excel_formula": "=O35-$Q$35",
        "dependencies": [
          "O35",
          "$Q$35"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =O35-$Q$35"
      },
      "P42": {
        "excel_formula": "=P35-$Q$35",
        "dependencies": [
          "P35",
          "$Q$35"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =P35-$Q$35"
      },
      "Q42": {
        "excel_formula": "=Q35-$Q$35",
        "dependencies": [
          "Q35",
          "$Q$35"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Q35-$Q$35"
      },
      "R42": {
        "excel_formula": "=R35-$Q$35",
        "dependencies": [
          "R35",
          "$Q$35"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =R35-$Q$35"
      },
      "S42": {
        "excel_formula": "=S35-$Q$35",
        "dependencies": [
          "S35",
          "$Q$35"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =S35-$Q$35"
      },
      "T42": {
        "excel_formula": "=T35-$Q$35",
        "dependencies": [
          "T35",
          "$Q$35"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =T35-$Q$35"
      },
      "U42": {
        "excel_formula": "=U35-$Q$35",
        "dependencies": [
          "U35",
          "$Q$35"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =U35-$Q$35"
      },
      "V42": {
        "excel_formula": "=V35-$Q$35",
        "dependencies": [
          "V35",
          "$Q$35"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =V35-$Q$35"
      },
      "W42": {
        "excel_formula": "=W35-$Q$35",
        "dependencies": [
          "W35",
          "$Q$35"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =W35-$Q$35"
      },
      "X42": {
        "excel_formula": "=X35-$Q$35",
        "dependencies": [
          "X35",
          "$Q$35"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =X35-$Q$35"
      },
      "Y42": {
        "excel_formula": "=Y35-$Q$35",
        "dependencies": [
          "Y35",
          "$Q$35"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Y35-$Q$35"
      },
      "Z42": {
        "excel_formula": "=Z35-$Q$35",
        "dependencies": [
          "Z35",
          "$Q$35"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Z35-$Q$35"
      },
      "AA42": {
        "excel_formula": "=AA35-$Q$35",
        "dependencies": [
          "AA35",
          "$Q$35"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AA35-$Q$35"
      },
      "AB42": {
        "excel_formula": "=AB35-$Q$35",
        "dependencies": [
          "AB35",
          "$Q$35"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AB35-$Q$35"
      },
      "AC42": {
        "excel_formula": "=AC35-$Q$35",
        "dependencies": [
          "AC35",
          "$Q$35"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AC35-$Q$35"
      },
      "E43": {
        "excel_formula": "=E41-E40",
        "dependencies": [
          "E41",
          "E40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =E41-E40"
      },
      "F43": {
        "excel_formula": "=F41-F40",
        "dependencies": [
          "F41",
          "F40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =F41-F40"
      },
      "G43": {
        "excel_formula": "=G41-G40",
        "dependencies": [
          "G41",
          "G40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =G41-G40"
      },
      "H43": {
        "excel_formula": "=H41-H40",
        "dependencies": [
          "H41",
          "H40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =H41-H40"
      },
      "I43": {
        "excel_formula": "=I41-I40",
        "dependencies": [
          "I41",
          "I40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =I41-I40"
      },
      "J43": {
        "excel_formula": "=J41-J40",
        "dependencies": [
          "J41",
          "J40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =J41-J40"
      },
      "K43": {
        "excel_formula": "=K41-K40",
        "dependencies": [
          "K41",
          "K40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =K41-K40"
      },
      "L43": {
        "excel_formula": "=L41-L40",
        "dependencies": [
          "L41",
          "L40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =L41-L40"
      },
      "M43": {
        "excel_formula": "=M41-M40",
        "dependencies": [
          "M41",
          "M40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =M41-M40"
      },
      "N43": {
        "excel_formula": "=N41-N40",
        "dependencies": [
          "N41",
          "N40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =N41-N40"
      },
      "O43": {
        "excel_formula": "=O41-O40",
        "dependencies": [
          "O41",
          "O40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =O41-O40"
      },
      "P43": {
        "excel_formula": "=P41-P40",
        "dependencies": [
          "P41",
          "P40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =P41-P40"
      },
      "Q43": {
        "excel_formula": "=Q41-Q40",
        "dependencies": [
          "Q41",
          "Q40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Q41-Q40"
      },
      "R43": {
        "excel_formula": "=R41-R40",
        "dependencies": [
          "R41",
          "R40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =R41-R40"
      },
      "S43": {
        "excel_formula": "=S41-S40",
        "dependencies": [
          "S41",
          "S40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =S41-S40"
      },
      "T43": {
        "excel_formula": "=T41-T40",
        "dependencies": [
          "T41",
          "T40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =T41-T40"
      },
      "U43": {
        "excel_formula": "=U41-U40",
        "dependencies": [
          "U41",
          "U40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =U41-U40"
      },
      "V43": {
        "excel_formula": "=V41-V40",
        "dependencies": [
          "V41",
          "V40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =V41-V40"
      },
      "W43": {
        "excel_formula": "=W41-W40",
        "dependencies": [
          "W41",
          "W40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =W41-W40"
      },
      "X43": {
        "excel_formula": "=X41-X40",
        "dependencies": [
          "X41",
          "X40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =X41-X40"
      },
      "Y43": {
        "excel_formula": "=Y41-Y40",
        "dependencies": [
          "Y41",
          "Y40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Y41-Y40"
      },
      "Z43": {
        "excel_formula": "=Z41-Z40",
        "dependencies": [
          "Z41",
          "Z40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Z41-Z40"
      },
      "AA43": {
        "excel_formula": "=AA41-AA40",
        "dependencies": [
          "AA41",
          "AA40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AA41-AA40"
      },
      "AB43": {
        "excel_formula": "=AB41-AB40",
        "dependencies": [
          "AB41",
          "AB40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AB41-AB40"
      },
      "AC43": {
        "excel_formula": "=AC41-AC40",
        "dependencies": [
          "AC41",
          "AC40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AC41-AC40"
      },
      "E44": {
        "excel_formula": "=E42-E40",
        "dependencies": [
          "E42",
          "E40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =E42-E40"
      },
      "F44": {
        "excel_formula": "=F42-F40",
        "dependencies": [
          "F42",
          "F40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =F42-F40"
      },
      "G44": {
        "excel_formula": "=G42-G40",
        "dependencies": [
          "G42",
          "G40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =G42-G40"
      },
      "H44": {
        "excel_formula": "=H42-H40",
        "dependencies": [
          "H42",
          "H40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =H42-H40"
      },
      "I44": {
        "excel_formula": "=I42-I40",
        "dependencies": [
          "I42",
          "I40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =I42-I40"
      },
      "J44": {
        "excel_formula": "=J42-J40",
        "dependencies": [
          "J42",
          "J40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =J42-J40"
      },
      "K44": {
        "excel_formula": "=K42-K40",
        "dependencies": [
          "K42",
          "K40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =K42-K40"
      },
      "L44": {
        "excel_formula": "=L42-L40",
        "dependencies": [
          "L42",
          "L40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =L42-L40"
      },
      "M44": {
        "excel_formula": "=M42-M40",
        "dependencies": [
          "M42",
          "M40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =M42-M40"
      },
      "N44": {
        "excel_formula": "=N42-N40",
        "dependencies": [
          "N42",
          "N40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =N42-N40"
      },
      "O44": {
        "excel_formula": "=O42-O40",
        "dependencies": [
          "O42",
          "O40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =O42-O40"
      },
      "P44": {
        "excel_formula": "=P42-P40",
        "dependencies": [
          "P42",
          "P40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =P42-P40"
      },
      "Q44": {
        "excel_formula": "=Q42-Q40",
        "dependencies": [
          "Q42",
          "Q40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Q42-Q40"
      },
      "R44": {
        "excel_formula": "=R42-R40",
        "dependencies": [
          "R42",
          "R40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =R42-R40"
      },
      "S44": {
        "excel_formula": "=S42-S40",
        "dependencies": [
          "S42",
          "S40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =S42-S40"
      },
      "T44": {
        "excel_formula": "=T42-T40",
        "dependencies": [
          "T42",
          "T40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =T42-T40"
      },
      "U44": {
        "excel_formula": "=U42-U40",
        "dependencies": [
          "U42",
          "U40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =U42-U40"
      },
      "V44": {
        "excel_formula": "=V42-V40",
        "dependencies": [
          "V42",
          "V40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =V42-V40"
      },
      "W44": {
        "excel_formula": "=W42-W40",
        "dependencies": [
          "W42",
          "W40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =W42-W40"
      },
      "X44": {
        "excel_formula": "=X42-X40",
        "dependencies": [
          "X42",
          "X40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =X42-X40"
      },
      "Y44": {
        "excel_formula": "=Y42-Y40",
        "dependencies": [
          "Y42",
          "Y40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Y42-Y40"
      },
      "Z44": {
        "excel_formula": "=Z42-Z40",
        "dependencies": [
          "Z42",
          "Z40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =Z42-Z40"
      },
      "AA44": {
        "excel_formula": "=AA42-AA40",
        "dependencies": [
          "AA42",
          "AA40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AA42-AA40"
      },
      "AB44": {
        "excel_formula": "=AB42-AB40",
        "dependencies": [
          "AB42",
          "AB40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AB42-AB40"
      },
      "AC44": {
        "excel_formula": "=AC42-AC40",
        "dependencies": [
          "AC42",
          "AC40"
        ],
        "python_equivalent": "# TODO: Convert from Excel: =AC42-AC40"
      }
    }
  },
  "cell_mappings": {
    "B1": {
      "value": "Expiration",
      "type": "s",
      "section": "input_data"
    },
    "C1": {
      "value": "Value",
      "type": "s",
      "section": "input_data"
    },
    "D1": {
      "value": "UPrice",
      "type": "s",
      "section": "input_data"
    },
    "E1": {
      "value": "-3",
      "type": "n",
      "section": "input_data"
    },
    "F1": {
      "value": "-2.75",
      "type": "n",
      "section": "input_data"
    },
    "G1": {
      "value": "-2.5",
      "type": "n",
      "section": "input_data"
    },
    "H1": {
      "value": "-2.25",
      "type": "n",
      "section": "input_data"
    },
    "I1": {
      "value": "-2",
      "type": "n",
      "section": "input_data"
    },
    "J1": {
      "value": "-1.75",
      "type": "n",
      "section": "input_data"
    },
    "K1": {
      "value": "-1.5",
      "type": "n",
      "section": "input_data"
    },
    "L1": {
      "value": "-1.25",
      "type": "n",
      "section": "input_data"
    },
    "M1": {
      "value": "-1",
      "type": "n",
      "section": "input_data"
    },
    "N1": {
      "value": "-0.75",
      "type": "n",
      "section": "input_data"
    },
    "O1": {
      "value": "-0.5",
      "type": "n",
      "section": "input_data"
    },
    "P1": {
      "value": "-0.25",
      "type": "n",
      "section": "input_data"
    },
    "Q1": {
      "value": "0",
      "type": "n",
      "section": "input_data"
    },
    "R1": {
      "value": "0.25",
      "type": "n",
      "section": "input_data"
    },
    "S1": {
      "value": "0.5",
      "type": "n",
      "section": "input_data"
    },
    "T1": {
      "value": "0.75",
      "type": "n",
      "section": "input_data"
    },
    "U1": {
      "value": "1",
      "type": "n",
      "section": "input_data"
    },
    "V1": {
      "value": "1.25",
      "type": "n",
      "section": "input_data"
    },
    "W1": {
      "value": "1.5",
      "type": "n",
      "section": "input_data"
    },
    "X1": {
      "value": "1.75",
      "type": "n",
      "section": "input_data"
    },
    "Y1": {
      "value": "2",
      "type": "n",
      "section": "input_data"
    },
    "Z1": {
      "value": "2.25",
      "type": "n",
      "section": "input_data"
    },
    "AA1": {
      "value": "2.5",
      "type": "n",
      "section": "input_data"
    },
    "AB1": {
      "value": "2.75",
      "type": "n",
      "section": "input_data"
    },
    "AC1": {
      "value": "3",
      "type": "n",
      "section": "input_data"
    },
    "B2": {
      "value": "XCME.ZN",
      "type": "s",
      "section": "input_data"
    },
    "C2": {
      "value": "ab_sDeltaPathCallPct",
      "type": "s",
      "section": "input_data"
    },
    "D2": {
      "value": "110.383",
      "type": "n",
      "section": "input_data"
    },
    "E2": {
      "value": "0.00145",
      "type": "n",
      "section": "input_data"
    },
    "F2": {
      "value": "0.00228",
      "type": "n",
      "section": "input_data"
    },
    "G2": {
      "value": "0.0036",
      "type": "n",
      "section": "input_data"
    },
    "H2": {
      "value": "0.00578",
      "type": "n",
      "section": "input_data"
    },
    "I2": {
      "value": "0.00975",
      "type": "n",
      "section": "input_data"
    },
    "J2": {
      "value": "0.01889",
      "type": "n",
      "section": "input_data"
    },
    "K2": {
      "value": "0.04029",
      "type": "n",
      "section": "input_data"
    },
    "L2": {
      "value": "0.08909",
      "type": "n",
      "section": "input_data"
    },
    "M2": {
      "value": "0.17909",
      "type": "n",
      "section": "input_data"
    },
    "N2": {
      "value": "0.30322",
      "type": "n",
      "section": "input_data"
    },
    "O2": {
      "value": "0.43917",
      "type": "n",
      "section": "input_data"
    },
    "P2": {
      "value": "0.56999",
      "type": "n",
      "section": "input_data"
    },
    "Q2": {
      "value": "0.70499",
      "type": "n",
      "section": "input_data"
    },
    "R2": {
      "value": "0.82615",
      "type": "n",
      "section": "input_data"
    },
    "S2": {
      "value": "0.91288",
      "type": "n",
      "section": "input_data"
    },
    "T2": {
      "value": "0.96004",
      "type": "n",
      "section": "input_data"
    },
    "U2": {
      "value": "0.98114",
      "type": "n",
      "section": "input_data"
    },
    "V2": {
      "value": "0.99037",
      "type": "n",
      "section": "input_data"
    },
    "W2": {
      "value": "0.99451",
      "type": "n",
      "section": "input_data"
    },
    "X2": {
      "value": "0.99667",
      "type": "n",
      "section": "input_data"
    },
    "Y2": {
      "value": "0.99791",
      "type": "n",
      "section": "input_data"
    },
    "Z2": {
      "value": "0.99865",
      "type": "n",
      "section": "input_data"
    },
    "AA2": {
      "value": "0.99912",
      "type": "n",
      "section": "input_data"
    },
    "AB2": {
      "value": "0.99942",
      "type": "n",
      "section": "input_data"
    },
    "AC2": {
      "value": "0.99962",
      "type": "n",
      "section": "input_data"
    },
    "B3": {
      "value": "XCME.ZN",
      "type": "s",
      "section": "input_data"
    },
    "C3": {
      "value": "ab_sDeltaPathPutPct",
      "type": "s",
      "section": "input_data"
    },
    "D3": {
      "value": "110.383",
      "type": "n",
      "section": "input_data"
    },
    "E3": {
      "value": "-0.99855",
      "type": "n",
      "section": "input_data"
    },
    "F3": {
      "value": "-0.99772",
      "type": "n",
      "section": "input_data"
    },
    "G3": {
      "value": "-0.9964",
      "type": "n",
      "section": "input_data"
    },
    "H3": {
      "value": "-0.99422",
      "type": "n",
      "section": "input_data"
    },
    "I3": {
      "value": "-0.99025",
      "type": "n",
      "section": "input_data"
    },
    "J3": {
      "value": "-0.98111",
      "type": "n",
      "section": "input_data"
    },
    "K3": {
      "value": "-0.95971",
      "type": "n",
      "section": "input_data"
    },
    "L3": {
      "value": "-0.91091",
      "type": "n",
      "section": "input_data"
    },
    "M3": {
      "value": "-0.82091",
      "type": "n",
      "section": "input_data"
    },
    "N3": {
      "value": "-0.69678",
      "type": "n",
      "section": "input_data"
    },
    "O3": {
      "value": "-0.56083",
      "type": "n",
      "section": "input_data"
    },
    "P3": {
      "value": "-0.43001",
      "type": "n",
      "section": "input_data"
    },
    "Q3": {
      "value": "-0.29501",
      "type": "n",
      "section": "input_data"
    },
    "R3": {
      "value": "-0.17385",
      "type": "n",
      "section": "input_data"
    },
    "S3": {
      "value": "-0.08712",
      "type": "n",
      "section": "input_data"
    },
    "T3": {
      "value": "-0.03996",
      "type": "n",
      "section": "input_data"
    },
    "U3": {
      "value": "-0.01886",
      "type": "n",
      "section": "input_data"
    },
    "V3": {
      "value": "-0.00963",
      "type": "n",
      "section": "input_data"
    },
    "W3": {
      "value": "-0.00549",
      "type": "n",
      "section": "input_data"
    },
    "X3": {
      "value": "-0.00333",
      "type": "n",
      "section": "input_data"
    },
    "Y3": {
      "value": "-0.00209",
      "type": "n",
      "section": "input_data"
    },
    "Z3": {
      "value": "-0.00135",
      "type": "n",
      "section": "input_data"
    },
    "AA3": {
      "value": "-0.00088",
      "type": "n",
      "section": "input_data"
    },
    "AB3": {
      "value": "-0.00058",
      "type": "n",
      "section": "input_data"
    },
    "AC3": {
      "value": "-0.00038",
      "type": "n",
      "section": "input_data"
    },
    "B4": {
      "value": "XCME.ZN",
      "type": "s",
      "section": "input_data"
    },
    "C4": {
      "value": "ab_sDeltaPathDV01Call",
      "type": "s",
      "section": "input_data"
    },
    "D4": {
      "value": "110.383",
      "type": "n",
      "section": "input_data"
    },
    "E4": {
      "value": "0.09143",
      "type": "n",
      "section": "input_data"
    },
    "F4": {
      "value": "0.14382",
      "type": "n",
      "section": "input_data"
    },
    "G4": {
      "value": "0.22679",
      "type": "n",
      "section": "input_data"
    },
    "H4": {
      "value": "0.36427",
      "type": "n",
      "section": "input_data"
    },
    "I4": {
      "value": "0.61457",
      "type": "n",
      "section": "input_data"
    },
    "J4": {
      "value": "1.1906",
      "type": "n",
      "section": "input_data"
    },
    "K4": {
      "value": "2.53865",
      "type": "n",
      "section": "input_data"
    },
    "L4": {
      "value": "5.61412",
      "type": "n",
      "section": "input_data"
    },
    "M4": {
      "value": "11.28538",
      "type": "n",
      "section": "input_data"
    },
    "N4": {
      "value": "19.10716",
      "type": "n",
      "section": "input_data"
    },
    "O4": {
      "value": "27.67362",
      "type": "n",
      "section": "input_data"
    },
    "P4": {
      "value": "35.91731",
      "type": "n",
      "section": "input_data"
    },
    "Q4": {
      "value": "44.42395",
      "type": "n",
      "section": "input_data"
    },
    "R4": {
      "value": "52.05891",
      "type": "n",
      "section": "input_data"
    },
    "S4": {
      "value": "57.52441",
      "type": "n",
      "section": "input_data"
    },
    "T4": {
      "value": "60.49583",
      "type": "n",
      "section": "input_data"
    },
    "U4": {
      "value": "61.82548",
      "type": "n",
      "section": "input_data"
    },
    "V4": {
      "value": "62.40716",
      "type": "n",
      "section": "input_data"
    },
    "W4": {
      "value": "62.66797",
      "type": "n",
      "section": "input_data"
    },
    "X4": {
      "value": "62.80429",
      "type": "n",
      "section": "input_data"
    },
    "Y4": {
      "value": "62.88242",
      "type": "n",
      "section": "input_data"
    },
    "Z4": {
      "value": "62.92924",
      "type": "n",
      "section": "input_data"
    },
    "AA4": {
      "value": "62.95847",
      "type": "n",
      "section": "input_data"
    },
    "AB4": {
      "value": "62.97735",
      "type": "n",
      "section": "input_data"
    },
    "AC4": {
      "value": "62.98984",
      "type": "n",
      "section": "input_data"
    },
    "B5": {
      "value": "XCME.ZN",
      "type": "s",
      "section": "input_data"
    },
    "C5": {
      "value": "ab_sDeltaPathDV01Put",
      "type": "s",
      "section": "input_data"
    },
    "D5": {
      "value": "110.383",
      "type": "n",
      "section": "input_data"
    },
    "E5": {
      "value": "-62.92257",
      "type": "n",
      "section": "input_data"
    },
    "F5": {
      "value": "-62.87018",
      "type": "n",
      "section": "input_data"
    },
    "G5": {
      "value": "-62.78721",
      "type": "n",
      "section": "input_data"
    },
    "H5": {
      "value": "-62.64973",
      "type": "n",
      "section": "input_data"
    },
    "I5": {
      "value": "-62.39943",
      "type": "n",
      "section": "input_data"
    },
    "J5": {
      "value": "-61.8234",
      "type": "n",
      "section": "input_data"
    },
    "K5": {
      "value": "-60.47535",
      "type": "n",
      "section": "input_data"
    },
    "L5": {
      "value": "-57.39988",
      "type": "n",
      "section": "input_data"
    },
    "M5": {
      "value": "-51.72862",
      "type": "n",
      "section": "input_data"
    },
    "N5": {
      "value": "-43.90684",
      "type": "n",
      "section": "input_data"
    },
    "O5": {
      "value": "-35.34038",
      "type": "n",
      "section": "input_data"
    },
    "P5": {
      "value": "-27.09669",
      "type": "n",
      "section": "input_data"
    },
    "Q5": {
      "value": "-18.59005",
      "type": "n",
      "section": "input_data"
    },
    "R5": {
      "value": "-10.95509",
      "type": "n",
      "section": "input_data"
    },
    "S5": {
      "value": "-5.48959",
      "type": "n",
      "section": "input_data"
    },
    "T5": {
      "value": "-2.51817",
      "type": "n",
      "section": "input_data"
    },
    "U5": {
      "value": "-1.18852",
      "type": "n",
      "section": "input_data"
    },
    "V5": {
      "value": "-0.60684",
      "type": "n",
      "section": "input_data"
    },
    "W5": {
      "value": "-0.34603",
      "type": "n",
      "section": "input_data"
    },
    "X5": {
      "value": "-0.20971",
      "type": "n",
      "section": "input_data"
    },
    "Y5": {
      "value": "-0.13158",
      "type": "n",
      "section": "input_data"
    },
    "Z5": {
      "value": "-0.08476",
      "type": "n",
      "section": "input_data"
    },
    "AA5": {
      "value": "-0.05553",
      "type": "n",
      "section": "input_data"
    },
    "AB5": {
      "value": "-0.03665",
      "type": "n",
      "section": "input_data"
    },
    "AC5": {
      "value": "-0.02416",
      "type": "n",
      "section": "input_data"
    },
    "B6": {
      "value": "XCME.ZN",
      "type": "s",
      "section": "input_data"
    },
    "C6": {
      "value": "ab_sGammaPathDV01",
      "type": "s",
      "section": "input_data"
    },
    "D6": {
      "value": "110.383",
      "type": "n",
      "section": "input_data"
    },
    "E6": {
      "value": "0.03157",
      "type": "n",
      "section": "input_data"
    },
    "F6": {
      "value": "0.03735",
      "type": "n",
      "section": "input_data"
    },
    "G6": {
      "value": "0.04743",
      "type": "n",
      "section": "input_data"
    },
    "H6": {
      "value": "0.06574",
      "type": "n",
      "section": "input_data"
    },
    "I6": {
      "value": "0.11292",
      "type": "n",
      "section": "input_data"
    },
    "J6": {
      "value": "0.23663",
      "type": "n",
      "section": "input_data"
    },
    "K6": {
      "value": "0.52417",
      "type": "n",
      "section": "input_data"
    },
    "L6": {
      "value": "1.12785",
      "type": "n",
      "section": "input_data"
    },
    "M6": {
      "value": "1.76323",
      "type": "n",
      "section": "input_data"
    },
    "N6": {
      "value": "2.15618",
      "type": "n",
      "section": "input_data"
    },
    "O6": {
      "value": "2.14437",
      "type": "n",
      "section": "input_data"
    },
    "P6": {
      "value": "2.14719",
      "type": "n",
      "section": "input_data"
    },
    "Q6": {
      "value": "2.12238",
      "type": "n",
      "section": "input_data"
    },
    "R6": {
      "value": "1.70827",
      "type": "n",
      "section": "input_data"
    },
    "S6": {
      "value": "1.08264",
      "type": "n",
      "section": "input_data"
    },
    "T6": {
      "value": "0.51301",
      "type": "n",
      "section": "input_data"
    },
    "U6": {
      "value": "0.23616",
      "type": "n",
      "section": "input_data"
    },
    "V6": {
      "value": "0.11584",
      "type": "n",
      "section": "input_data"
    },
    "W6": {
      "value": "0.0664",
      "type": "n",
      "section": "input_data"
    },
    "X6": {
      "value": "0.04649",
      "type": "n",
      "section": "input_data"
    },
    "Y6": {
      "value": "0.03597",
      "type": "n",
      "section": "input_data"
    },
    "Z6": {
      "value": "0.03018",
      "type": "n",
      "section": "input_data"
    },
    "AA6": {
      "value": "0.02684",
      "type": "n",
      "section": "input_data"
    },
    "AB6": {
      "value": "0.02483",
      "type": "n",
      "section": "input_data"
    },
    "AC6": {
      "value": "0.02356",
      "type": "n",
      "section": "input_data"
    },
    "B7": {
      "value": "XCME.ZN",
      "type": "s",
      "section": "input_data"
    },
    "C7": {
      "value": "ab_VegaDV01",
      "type": "s",
      "section": "input_data"
    },
    "D7": {
      "value": "110.383",
      "type": "n",
      "section": "input_data"
    },
    "E7": {
      "value": "0.00148",
      "type": "n",
      "section": "input_data"
    },
    "F7": {
      "value": "0.00571",
      "type": "n",
      "section": "input_data"
    },
    "G7": {
      "value": "0.01917",
      "type": "n",
      "section": "input_data"
    },
    "H7": {
      "value": "0.05628",
      "type": "n",
      "section": "input_data"
    },
    "I7": {
      "value": "0.14433",
      "type": "n",
      "section": "input_data"
    },
    "J7": {
      "value": "0.32336",
      "type": "n",
      "section": "input_data"
    },
    "K7": {
      "value": "0.63285",
      "type": "n",
      "section": "input_data"
    },
    "L7": {
      "value": "1.08201",
      "type": "n",
      "section": "input_data"
    },
    "M7": {
      "value": "1.6161",
      "type": "n",
      "section": "input_data"
    },
    "N7": {
      "value": "2.10871",
      "type": "n",
      "section": "input_data"
    },
    "O7": {
      "value": "2.40367",
      "type": "n",
      "section": "input_data"
    },
    "P7": {
      "value": "2.39354",
      "type": "n",
      "section": "input_data"
    },
    "Q7": {
      "value": "2.08216",
      "type": "n",
      "section": "input_data"
    },
    "R7": {
      "value": "1.58234",
      "type": "n",
      "section": "input_data"
    },
    "S7": {
      "value": "1.05049",
      "type": "n",
      "section": "input_data"
    },
    "T7": {
      "value": "0.60925",
      "type": "n",
      "section": "input_data"
    },
    "U7": {
      "value": "0.30868",
      "type": "n",
      "section": "input_data"
    },
    "V7": {
      "value": "0.13662",
      "type": "n",
      "section": "input_data"
    },
    "W7": {
      "value": "0.05283",
      "type": "n",
      "section": "input_data"
    },
    "X7": {
      "value": "0.01784",
      "type": "n",
      "section": "input_data"
    },
    "Y7": {
      "value": "0.00527",
      "type": "n",
      "section": "input_data"
    },
    "Z7": {
      "value": "0.00136",
      "type": "n",
      "section": "input_data"
    },
    "AA7": {
      "value": "0.00031",
      "type": "n",
      "section": "input_data"
    },
    "AB7": {
      "value": "6e-05",
      "type": "n",
      "section": "input_data"
    },
    "AC7": {
      "value": "1e-05",
      "type": "n",
      "section": "input_data"
    },
    "B8": {
      "value": "XCME.ZN",
      "type": "s",
      "section": "input_data"
    },
    "C8": {
      "value": "ab_Theta",
      "type": "s",
      "section": "input_data"
    },
    "D8": {
      "value": "110.383",
      "type": "n",
      "section": "input_data"
    },
    "E8": {
      "value": "0.01833",
      "type": "n",
      "section": "input_data"
    },
    "F8": {
      "value": "0.07782",
      "type": "n",
      "section": "input_data"
    },
    "G8": {
      "value": "0.28014",
      "type": "n",
      "section": "input_data"
    },
    "H8": {
      "value": "0.86095",
      "type": "n",
      "section": "input_data"
    },
    "I8": {
      "value": "2.27259",
      "type": "n",
      "section": "input_data"
    },
    "J8": {
      "value": "5.17719",
      "type": "n",
      "section": "input_data"
    },
    "K8": {
      "value": "10.21808",
      "type": "n",
      "section": "input_data"
    },
    "L8": {
      "value": "17.52746",
      "type": "n",
      "section": "input_data"
    },
    "M8": {
      "value": "26.19093",
      "type": "n",
      "section": "input_data"
    },
    "N8": {
      "value": "34.15297",
      "type": "n",
      "section": "input_data"
    },
    "O8": {
      "value": "38.90787",
      "type": "n",
      "section": "input_data"
    },
    "P8": {
      "value": "38.74473",
      "type": "n",
      "section": "input_data"
    },
    "Q8": {
      "value": "33.72451",
      "type": "n",
      "section": "input_data"
    },
    "R8": {
      "value": "25.64423",
      "type": "n",
      "section": "input_data"
    },
    "S8": {
      "value": "17.01514",
      "type": "n",
      "section": "input_data"
    },
    "T8": {
      "value": "9.8336",
      "type": "n",
      "section": "input_data"
    },
    "U8": {
      "value": "4.93842",
      "type": "n",
      "section": "input_data"
    },
    "V8": {
      "value": "2.14815",
      "type": "n",
      "section": "input_data"
    },
    "W8": {
      "value": "0.80624",
      "type": "n",
      "section": "input_data"
    },
    "X8": {
      "value": "0.2598",
      "type": "n",
      "section": "input_data"
    },
    "Y8": {
      "value": "0.07145",
      "type": "n",
      "section": "input_data"
    },
    "Z8": {
      "value": "0.01665",
      "type": "n",
      "section": "input_data"
    },
    "AA8": {
      "value": "0.00326",
      "type": "n",
      "section": "input_data"
    },
    "AB8": {
      "value": "0.00053",
      "type": "n",
      "section": "input_data"
    },
    "AC8": {
      "value": "7e-05",
      "type": "n",
      "section": "input_data"
    },
    "B9": {
      "value": "XCME.ZN",
      "type": "s",
      "section": "input_data"
    },
    "C9": {
      "value": "ab_F",
      "type": "s",
      "section": "input_data"
    },
    "D9": {
      "value": "110.383",
      "type": "n",
      "section": "input_data"
    },
    "E9": {
      "value": "107.38281",
      "type": "n",
      "section": "input_data"
    },
    "F9": {
      "value": "107.63281",
      "type": "n",
      "section": "input_data"
    },
    "G9": {
      "value": "107.88281",
      "type": "n",
      "section": "input_data"
    },
    "H9": {
      "value": "108.13281",
      "type": "n",
      "section": "input_data"
    },
    "I9": {
      "value": "108.38281",
      "type": "n",
      "section": "input_data"
    },
    "J9": {
      "value": "108.63281",
      "type": "n",
      "section": "input_data"
    },
    "K9": {
      "value": "108.88281",
      "type": "n",
      "section": "input_data"
    },
    "L9": {
      "value": "109.13281",
      "type": "n",
      "section": "input_data"
    },
    "M9": {
      "value": "109.38281",
      "type": "n",
      "section": "input_data"
    },
    "N9": {
      "value": "109.63281",
      "type": "n",
      "section": "input_data"
    },
    "O9": {
      "value": "109.88281",
      "type": "n",
      "section": "input_data"
    },
    "P9": {
      "value": "110.13281",
      "type": "n",
      "section": "input_data"
    },
    "Q9": {
      "value": "110.38281",
      "type": "n",
      "section": "input_data"
    },
    "R9": {
      "value": "110.63281",
      "type": "n",
      "section": "input_data"
    },
    "S9": {
      "value": "110.88281",
      "type": "n",
      "section": "input_data"
    },
    "T9": {
      "value": "111.13281",
      "type": "n",
      "section": "input_data"
    },
    "U9": {
      "value": "111.38281",
      "type": "n",
      "section": "input_data"
    },
    "V9": {
      "value": "111.63281",
      "type": "n",
      "section": "input_data"
    },
    "W9": {
      "value": "111.88281",
      "type": "n",
      "section": "input_data"
    },
    "X9": {
      "value": "112.13281",
      "type": "n",
      "section": "input_data"
    },
    "Y9": {
      "value": "112.38281",
      "type": "n",
      "section": "input_data"
    },
    "Z9": {
      "value": "112.63281",
      "type": "n",
      "section": "input_data"
    },
    "AA9": {
      "value": "112.88281",
      "type": "n",
      "section": "input_data"
    },
    "AB9": {
      "value": "113.13281",
      "type": "n",
      "section": "input_data"
    },
    "AC9": {
      "value": "113.38281",
      "type": "n",
      "section": "input_data"
    },
    "B10": {
      "value": "XCME.ZN",
      "type": "s",
      "section": "input_data"
    },
    "C10": {
      "value": "ab_K",
      "type": "s",
      "section": "input_data"
    },
    "D10": {
      "value": "110.383",
      "type": "n",
      "section": "input_data"
    },
    "E10": {
      "value": "110",
      "type": "n",
      "section": "input_data"
    },
    "F10": {
      "value": "110",
      "type": "n",
      "section": "input_data"
    },
    "G10": {
      "value": "110",
      "type": "n",
      "section": "input_data"
    },
    "H10": {
      "value": "110",
      "type": "n",
      "section": "input_data"
    },
    "I10": {
      "value": "110",
      "type": "n",
      "section": "input_data"
    },
    "J10": {
      "value": "110",
      "type": "n",
      "section": "input_data"
    },
    "K10": {
      "value": "110",
      "type": "n",
      "section": "input_data"
    },
    "L10": {
      "value": "110",
      "type": "n",
      "section": "input_data"
    },
    "M10": {
      "value": "110",
      "type": "n",
      "section": "input_data"
    },
    "N10": {
      "value": "110",
      "type": "n",
      "section": "input_data"
    },
    "O10": {
      "value": "110",
      "type": "n",
      "section": "input_data"
    },
    "P10": {
      "value": "110",
      "type": "n",
      "section": "input_data"
    },
    "Q10": {
      "value": "110",
      "type": "n",
      "section": "input_data"
    },
    "R10": {
      "value": "110",
      "type": "n",
      "section": "input_data"
    },
    "S10": {
      "value": "110",
      "type": "n",
      "section": "input_data"
    },
    "T10": {
      "value": "110",
      "type": "n",
      "section": "input_data"
    },
    "U10": {
      "value": "110",
      "type": "n",
      "section": "input_data"
    },
    "V10": {
      "value": "110",
      "type": "n",
      "section": "input_data"
    },
    "W10": {
      "value": "110",
      "type": "n",
      "section": "input_data"
    },
    "X10": {
      "value": "110",
      "type": "n",
      "section": "input_data"
    },
    "Y10": {
      "value": "110",
      "type": "n",
      "section": "input_data"
    },
    "Z10": {
      "value": "110",
      "type": "n",
      "section": "input_data"
    },
    "AA10": {
      "value": "110",
      "type": "n",
      "section": "input_data"
    },
    "AB10": {
      "value": "110",
      "type": "n",
      "section": "input_data"
    },
    "AC10": {
      "value": "110",
      "type": "n",
      "section": "input_data"
    },
    "B11": {
      "value": "XCME.ZN",
      "type": "s",
      "section": "input_data"
    },
    "C11": {
      "value": "ab_R",
      "type": "s",
      "section": "input_data"
    },
    "D11": {
      "value": "110.383",
      "type": "n",
      "section": "input_data"
    },
    "E11": {
      "value": "0",
      "type": "n",
      "section": "input_data"
    },
    "F11": {
      "value": "0",
      "type": "n",
      "section": "input_data"
    },
    "G11": {
      "value": "0",
      "type": "n",
      "section": "input_data"
    },
    "H11": {
      "value": "0",
      "type": "n",
      "section": "input_data"
    },
    "I11": {
      "value": "0",
      "type": "n",
      "section": "input_data"
    },
    "J11": {
      "value": "0",
      "type": "n",
      "section": "input_data"
    },
    "K11": {
      "value": "0",
      "type": "n",
      "section": "input_data"
    },
    "L11": {
      "value": "0",
      "type": "n",
      "section": "input_data"
    },
    "M11": {
      "value": "0",
      "type": "n",
      "section": "input_data"
    },
    "N11": {
      "value": "0",
      "type": "n",
      "section": "input_data"
    },
    "O11": {
      "value": "0",
      "type": "n",
      "section": "input_data"
    },
    "P11": {
      "value": "0",
      "type": "n",
      "section": "input_data"
    },
    "Q11": {
      "value": "0",
      "type": "n",
      "section": "input_data"
    },
    "R11": {
      "value": "0",
      "type": "n",
      "section": "input_data"
    },
    "S11": {
      "value": "0",
      "type": "n",
      "section": "input_data"
    },
    "T11": {
      "value": "0",
      "type": "n",
      "section": "input_data"
    },
    "U11": {
      "value": "0",
      "type": "n",
      "section": "input_data"
    },
    "V11": {
      "value": "0",
      "type": "n",
      "section": "input_data"
    },
    "W11": {
      "value": "0",
      "type": "n",
      "section": "input_data"
    },
    "X11": {
      "value": "0",
      "type": "n",
      "section": "input_data"
    },
    "Y11": {
      "value": "0",
      "type": "n",
      "section": "input_data"
    },
    "Z11": {
      "value": "0",
      "type": "n",
      "section": "input_data"
    },
    "AA11": {
      "value": "0",
      "type": "n",
      "section": "input_data"
    },
    "AB11": {
      "value": "0",
      "type": "n",
      "section": "input_data"
    },
    "AC11": {
      "value": "0",
      "type": "n",
      "section": "input_data"
    },
    "B12": {
      "value": "XCME.ZN",
      "type": "s",
      "section": "input_data"
    },
    "C12": {
      "value": "ab_T",
      "type": "s",
      "section": "input_data"
    },
    "D12": {
      "value": "110.383",
      "type": "n",
      "section": "input_data"
    },
    "E12": {
      "value": "3.4375",
      "type": "n",
      "section": "input_data"
    },
    "F12": {
      "value": "3.4375",
      "type": "n",
      "section": "input_data"
    },
    "G12": {
      "value": "3.4375",
      "type": "n",
      "section": "input_data"
    },
    "H12": {
      "value": "3.4375",
      "type": "n",
      "section": "input_data"
    },
    "I12": {
      "value": "3.4375",
      "type": "n",
      "section": "input_data"
    },
    "J12": {
      "value": "3.4375",
      "type": "n",
      "section": "input_data"
    },
    "K12": {
      "value": "3.4375",
      "type": "n",
      "section": "input_data"
    },
    "L12": {
      "value": "3.4375",
      "type": "n",
      "section": "input_data"
    },
    "M12": {
      "value": "3.4375",
      "type": "n",
      "section": "input_data"
    },
    "N12": {
      "value": "3.4375",
      "type": "n",
      "section": "input_data"
    },
    "O12": {
      "value": "3.4375",
      "type": "n",
      "section": "input_data"
    },
    "P12": {
      "value": "3.4375",
      "type": "n",
      "section": "input_data"
    },
    "Q12": {
      "value": "3.4375",
      "type": "n",
      "section": "input_data"
    },
    "R12": {
      "value": "3.4375",
      "type": "n",
      "section": "input_data"
    },
    "S12": {
      "value": "3.4375",
      "type": "n",
      "section": "input_data"
    },
    "T12": {
      "value": "3.4375",
      "type": "n",
      "section": "input_data"
    },
    "U12": {
      "value": "3.4375",
      "type": "n",
      "section": "input_data"
    },
    "V12": {
      "value": "3.4375",
      "type": "n",
      "section": "input_data"
    },
    "W12": {
      "value": "3.4375",
      "type": "n",
      "section": "input_data"
    },
    "X12": {
      "value": "3.4375",
      "type": "n",
      "section": "input_data"
    },
    "Y12": {
      "value": "3.4375",
      "type": "n",
      "section": "input_data"
    },
    "Z12": {
      "value": "3.4375",
      "type": "n",
      "section": "input_data"
    },
    "AA12": {
      "value": "3.4375",
      "type": "n",
      "section": "input_data"
    },
    "AB12": {
      "value": "3.4375",
      "type": "n",
      "section": "input_data"
    },
    "AC12": {
      "value": "3.4375",
      "type": "n",
      "section": "input_data"
    },
    "B13": {
      "value": "XCME.ZN",
      "type": "s",
      "section": "input_data"
    },
    "C13": {
      "value": "ab_Vol",
      "type": "s",
      "section": "input_data"
    },
    "D13": {
      "value": "110.383",
      "type": "n",
      "section": "input_data"
    },
    "E13": {
      "value": "11.5777",
      "type": "n",
      "section": "input_data"
    },
    "F13": {
      "value": "10.76767",
      "type": "n",
      "section": "input_data"
    },
    "G13": {
      "value": "9.98839",
      "type": "n",
      "section": "input_data"
    },
    "H13": {
      "value": "9.24295",
      "type": "n",
      "section": "input_data"
    },
    "I13": {
      "value": "8.5356",
      "type": "n",
      "section": "input_data"
    },
    "J13": {
      "value": "7.89891",
      "type": "n",
      "section": "input_data"
    },
    "K13": {
      "value": "7.39238",
      "type": "n",
      "section": "input_data"
    },
    "L13": {
      "value": "7.07501",
      "type": "n",
      "section": "input_data"
    },
    "M13": {
      "value": "6.97317",
      "type": "n",
      "section": "input_data"
    },
    "N13": {
      "value": "7.0053",
      "type": "n",
      "section": "input_data"
    },
    "O13": {
      "value": "7.06886",
      "type": "n",
      "section": "input_data"
    },
    "P13": {
      "value": "7.06887",
      "type": "n",
      "section": "input_data"
    },
    "Q13": {
      "value": "7.00765",
      "type": "n",
      "section": "input_data"
    },
    "R13": {
      "value": "6.97418",
      "type": "n",
      "section": "input_data"
    },
    "S13": {
      "value": "7.05827",
      "type": "n",
      "section": "input_data"
    },
    "T13": {
      "value": "7.32771",
      "type": "n",
      "section": "input_data"
    },
    "U13": {
      "value": "7.7603",
      "type": "n",
      "section": "input_data"
    },
    "V13": {
      "value": "8.30969",
      "type": "n",
      "section": "input_data"
    },
    "W13": {
      "value": "8.93093",
      "type": "n",
      "section": "input_data"
    },
    "X13": {
      "value": "9.5945",
      "type": "n",
      "section": "input_data"
    },
    "Y13": {
      "value": "10.29386",
      "type": "n",
      "section": "input_data"
    },
    "Z13": {
      "value": "11.02458",
      "type": "n",
      "section": "input_data"
    },
    "AA13": {
      "value": "11.78233",
      "type": "n",
      "section": "input_data"
    },
    "AB13": {
      "value": "12.56288",
      "type": "n",
      "section": "input_data"
    },
    "AC13": {
      "value": "13.36212",
      "type": "n",
      "section": "input_data"
    },
    "B14": {
      "value": "XCME.ZN",
      "type": "s",
      "section": "input_data"
    },
    "C14": {
      "value": "ab_sCall",
      "type": "s",
      "section": "input_data"
    },
    "D14": {
      "value": "110.383",
      "type": "n",
      "section": "input_data"
    },
    "E14": {
      "value": "3.77366",
      "type": "n",
      "section": "input_data"
    },
    "F14": {
      "value": "4.23275",
      "type": "n",
      "section": "input_data"
    },
    "G14": {
      "value": "4.95476",
      "type": "n",
      "section": "input_data"
    },
    "H14": {
      "value": "6.10331",
      "type": "n",
      "section": "input_data"
    },
    "I14": {
      "value": "7.98427",
      "type": "n",
      "section": "input_data"
    },
    "J14": {
      "value": "11.40434",
      "type": "n",
      "section": "input_data"
    },
    "K14": {
      "value": "18.42741",
      "type": "n",
      "section": "input_data"
    },
    "L14": {
      "value": "33.79875",
      "type": "n",
      "section": "input_data"
    },
    "M14": {
      "value": "66.47711",
      "type": "n",
      "section": "input_data"
    },
    "N14": {
      "value": "126.24534",
      "type": "n",
      "section": "input_data"
    },
    "O14": {
      "value": "219.0641",
      "type": "n",
      "section": "input_data"
    },
    "P14": {
      "value": "345.19411",
      "type": "n",
      "section": "input_data"
    },
    "Q14": {
      "value": "504.59469",
      "type": "n",
      "section": "input_data"
    },
    "R14": {
      "value": "696.53571",
      "type": "n",
      "section": "input_data"
    },
    "S14": {
      "value": "914.74595",
      "type": "n",
      "section": "input_data"
    },
    "T14": {
      "value": "1149.61519",
      "type": "n",
      "section": "input_data"
    },
    "U14": {
      "value": "1392.62322",
      "type": "n",
      "section": "input_data"
    },
    "V14": {
      "value": "1639.21828",
      "type": "n",
      "section": "input_data"
    },
    "W14": {
      "value": "1887.393",
      "type": "n",
      "section": "input_data"
    },
    "X14": {
      "value": "2136.31657",
      "type": "n",
      "section": "input_data"
    },
    "Y14": {
      "value": "2385.6533",
      "type": "n",
      "section": "input_data"
    },
    "Z14": {
      "value": "2635.23172",
      "type": "n",
      "section": "input_data"
    },
    "AA14": {
      "value": "2884.95779",
      "type": "n",
      "section": "input_data"
    },
    "AB14": {
      "value": "3134.77756",
      "type": "n",
      "section": "input_data"
    },
    "AC14": {
      "value": "3384.65859",
      "type": "n",
      "section": "input_data"
    },
    "B15": {
      "value": "XCME.ZN",
      "type": "s",
      "section": "input_data"
    },
    "C15": {
      "value": "ab_sPut",
      "type": "s",
      "section": "input_data"
    },
    "D15": {
      "value": "110.383",
      "type": "n",
      "section": "input_data"
    },
    "E15": {
      "value": "2620.96116",
      "type": "n",
      "section": "input_data"
    },
    "F15": {
      "value": "2371.42025",
      "type": "n",
      "section": "input_data"
    },
    "G15": {
      "value": "2122.14226",
      "type": "n",
      "section": "input_data"
    },
    "H15": {
      "value": "1873.29081",
      "type": "n",
      "section": "input_data"
    },
    "I15": {
      "value": "1625.17177",
      "type": "n",
      "section": "input_data"
    },
    "J15": {
      "value": "1378.59184",
      "type": "n",
      "section": "input_data"
    },
    "K15": {
      "value": "1135.61491",
      "type": "n",
      "section": "input_data"
    },
    "L15": {
      "value": "900.98625",
      "type": "n",
      "section": "input_data"
    },
    "M15": {
      "value": "683.66461",
      "type": "n",
      "section": "input_data"
    },
    "N15": {
      "value": "493.43284",
      "type": "n",
      "section": "input_data"
    },
    "O15": {
      "value": "336.2516",
      "type": "n",
      "section": "input_data"
    },
    "P15": {
      "value": "212.38161",
      "type": "n",
      "section": "input_data"
    },
    "Q15": {
      "value": "121.78219",
      "type": "n",
      "section": "input_data"
    },
    "R15": {
      "value": "63.72321",
      "type": "n",
      "section": "input_data"
    },
    "S15": {
      "value": "31.93345",
      "type": "n",
      "section": "input_data"
    },
    "T15": {
      "value": "16.80269",
      "type": "n",
      "section": "input_data"
    },
    "U15": {
      "value": "9.81072",
      "type": "n",
      "section": "input_data"
    },
    "V15": {
      "value": "6.40578",
      "type": "n",
      "section": "input_data"
    },
    "W15": {
      "value": "4.5805",
      "type": "n",
      "section": "input_data"
    },
    "X15": {
      "value": "3.50407",
      "type": "n",
      "section": "input_data"
    },
    "Y15": {
      "value": "2.8408",
      "type": "n",
      "section": "input_data"
    },
    "Z15": {
      "value": "2.41922",
      "type": "n",
      "section": "input_data"
    },
    "AA15": {
      "value": "2.14529",
      "type": "n",
      "section": "input_data"
    },
    "AB15": {
      "value": "1.96506",
      "type": "n",
      "section": "input_data"
    },
    "AC15": {
      "value": "1.84609",
      "type": "n",
      "section": "input_data"
    },
    "C18": {
      "value": "shift in bp",
      "type": "s",
      "section": "call_analysis"
    },
    "E18": {
      "value": "-48",
      "type": "n",
      "section": "call_analysis"
    },
    "F18": {
      "value": "-44",
      "type": "n",
      "section": "call_analysis"
    },
    "G18": {
      "value": "-40",
      "type": "n",
      "section": "call_analysis"
    },
    "H18": {
      "value": "-36",
      "type": "n",
      "section": "call_analysis"
    },
    "I18": {
      "value": "-32",
      "type": "n",
      "section": "call_analysis"
    },
    "J18": {
      "value": "-28",
      "type": "n",
      "section": "call_analysis"
    },
    "K18": {
      "value": "-24",
      "type": "n",
      "section": "call_analysis"
    },
    "L18": {
      "value": "-20",
      "type": "n",
      "section": "call_analysis"
    },
    "M18": {
      "value": "-16",
      "type": "n",
      "section": "call_analysis"
    },
    "N18": {
      "value": "-12",
      "type": "n",
      "section": "call_analysis"
    },
    "O18": {
      "value": "-8",
      "type": "n",
      "section": "call_analysis"
    },
    "P18": {
      "value": "-4",
      "type": "n",
      "section": "call_analysis"
    },
    "Q18": {
      "value": "0",
      "type": "n",
      "section": "call_analysis"
    },
    "R18": {
      "value": "4",
      "type": "n",
      "section": "call_analysis"
    },
    "S18": {
      "value": "8",
      "type": "n",
      "section": "call_analysis"
    },
    "T18": {
      "value": "12",
      "type": "n",
      "section": "call_analysis"
    },
    "U18": {
      "value": "16",
      "type": "n",
      "section": "call_analysis"
    },
    "V18": {
      "value": "20",
      "type": "n",
      "section": "call_analysis"
    },
    "W18": {
      "value": "24",
      "type": "n",
      "section": "call_analysis"
    },
    "X18": {
      "value": "28",
      "type": "n",
      "section": "call_analysis"
    },
    "Y18": {
      "value": "32",
      "type": "n",
      "section": "call_analysis"
    },
    "Z18": {
      "value": "36",
      "type": "n",
      "section": "call_analysis"
    },
    "AA18": {
      "value": "40",
      "type": "n",
      "section": "call_analysis"
    },
    "AB18": {
      "value": "44",
      "type": "n",
      "section": "call_analysis"
    },
    "AC18": {
      "value": "48",
      "type": "n",
      "section": "call_analysis"
    },
    "C19": {
      "value": "Call Price ACTANT",
      "type": "s",
      "section": "call_analysis"
    },
    "E19": {
      "value": "=E14",
      "type": "f",
      "section": "call_analysis"
    },
    "F19": {
      "value": "=F14",
      "type": "f",
      "section": "call_analysis"
    },
    "G19": {
      "value": "=G14",
      "type": "f",
      "section": "call_analysis"
    },
    "H19": {
      "value": "=H14",
      "type": "f",
      "section": "call_analysis"
    },
    "I19": {
      "value": "=I14",
      "type": "f",
      "section": "call_analysis"
    },
    "J19": {
      "value": "=J14",
      "type": "f",
      "section": "call_analysis"
    },
    "K19": {
      "value": "=K14",
      "type": "f",
      "section": "call_analysis"
    },
    "L19": {
      "value": "=L14",
      "type": "f",
      "section": "call_analysis"
    },
    "M19": {
      "value": "=M14",
      "type": "f",
      "section": "call_analysis"
    },
    "N19": {
      "value": "=N14",
      "type": "f",
      "section": "call_analysis"
    },
    "O19": {
      "value": "=O14",
      "type": "f",
      "section": "call_analysis"
    },
    "P19": {
      "value": "=P14",
      "type": "f",
      "section": "call_analysis"
    },
    "Q19": {
      "value": "=Q14",
      "type": "f",
      "section": "call_analysis"
    },
    "R19": {
      "value": "=R14",
      "type": "f",
      "section": "call_analysis"
    },
    "S19": {
      "value": "=S14",
      "type": "f",
      "section": "call_analysis"
    },
    "T19": {
      "value": "=T14",
      "type": "f",
      "section": "call_analysis"
    },
    "U19": {
      "value": "=U14",
      "type": "f",
      "section": "call_analysis"
    },
    "V19": {
      "value": "=V14",
      "type": "f",
      "section": "call_analysis"
    },
    "W19": {
      "value": "=W14",
      "type": "f",
      "section": "call_analysis"
    },
    "X19": {
      "value": "=X14",
      "type": "f",
      "section": "call_analysis"
    },
    "Y19": {
      "value": "=Y14",
      "type": "f",
      "section": "call_analysis"
    },
    "Z19": {
      "value": "=Z14",
      "type": "f",
      "section": "call_analysis"
    },
    "AA19": {
      "value": "=AA14",
      "type": "f",
      "section": "call_analysis"
    },
    "AB19": {
      "value": "=AB14",
      "type": "f",
      "section": "call_analysis"
    },
    "AC19": {
      "value": "=AC14",
      "type": "f",
      "section": "call_analysis"
    },
    "C20": {
      "value": "TS Predicted from 0",
      "type": "s",
      "section": "call_analysis"
    },
    "E20": {
      "value": "=$Q$20+$Q$4*(E18-$Q$18)+0.5*$Q$6*(E18-$Q$18)*(E18-$Q$18)",
      "type": "f",
      "section": "call_analysis"
    },
    "F20": {
      "value": "=$Q$20+$Q$4*(F18-$Q$18)+0.5*$Q$6*(F18-$Q$18)*(F18-$Q$18)",
      "type": "f",
      "section": "call_analysis"
    },
    "G20": {
      "value": "=$Q$20+$Q$4*(G18-$Q$18)+0.5*$Q$6*(G18-$Q$18)*(G18-$Q$18)",
      "type": "f",
      "section": "call_analysis"
    },
    "H20": {
      "value": "=$Q$20+$Q$4*(H18-$Q$18)+0.5*$Q$6*(H18-$Q$18)*(H18-$Q$18)",
      "type": "f",
      "section": "call_analysis"
    },
    "I20": {
      "value": "=$Q$20+$Q$4*(I18-$Q$18)+0.5*$Q$6*(I18-$Q$18)*(I18-$Q$18)",
      "type": "f",
      "section": "call_analysis"
    },
    "J20": {
      "value": "=$Q$20+$Q$4*(J18-$Q$18)+0.5*$Q$6*(J18-$Q$18)*(J18-$Q$18)",
      "type": "f",
      "section": "call_analysis"
    },
    "K20": {
      "value": "=$Q$20+$Q$4*(K18-$Q$18)+0.5*$Q$6*(K18-$Q$18)*(K18-$Q$18)",
      "type": "f",
      "section": "call_analysis"
    },
    "L20": {
      "value": "=$Q$20+$Q$4*(L18-$Q$18)+0.5*$Q$6*(L18-$Q$18)*(L18-$Q$18)",
      "type": "f",
      "section": "call_analysis"
    },
    "M20": {
      "value": "=$Q$20+$Q$4*(M18-$Q$18)+0.5*$Q$6*(M18-$Q$18)*(M18-$Q$18)",
      "type": "f",
      "section": "call_analysis"
    },
    "N20": {
      "value": "=$Q$20+$Q$4*(N18-$Q$18)+0.5*$Q$6*(N18-$Q$18)*(N18-$Q$18)",
      "type": "f",
      "section": "call_analysis"
    },
    "O20": {
      "value": "=$Q$20+$Q$4*(O18-$Q$18)+0.5*$Q$6*(O18-$Q$18)*(O18-$Q$18)",
      "type": "f",
      "section": "call_analysis"
    },
    "P20": {
      "value": "=$Q$20+$Q$4*(P18-$Q$18)+0.5*$Q$6*(P18-$Q$18)*(P18-$Q$18)",
      "type": "f",
      "section": "call_analysis"
    },
    "Q20": {
      "value": "=Q14",
      "type": "f",
      "section": "call_analysis"
    },
    "R20": {
      "value": "=$Q$20+$Q$4*(R18-$Q$18)+0.5*$Q$6*(R18-$Q$18)*(R18-$Q$18)",
      "type": "f",
      "section": "call_analysis"
    },
    "S20": {
      "value": "=$Q$20+$Q$4*(S18-$Q$18)+0.5*$Q$6*(S18-$Q$18)*(S18-$Q$18)",
      "type": "f",
      "section": "call_analysis"
    },
    "T20": {
      "value": "=$Q$20+$Q$4*(T18-$Q$18)+0.5*$Q$6*(T18-$Q$18)*(T18-$Q$18)",
      "type": "f",
      "section": "call_analysis"
    },
    "U20": {
      "value": "=$Q$20+$Q$4*(U18-$Q$18)+0.5*$Q$6*(U18-$Q$18)*(U18-$Q$18)",
      "type": "f",
      "section": "call_analysis"
    },
    "V20": {
      "value": "=$Q$20+$Q$4*(V18-$Q$18)+0.5*$Q$6*(V18-$Q$18)*(V18-$Q$18)",
      "type": "f",
      "section": "call_analysis"
    },
    "W20": {
      "value": "=$Q$20+$Q$4*(W18-$Q$18)+0.5*$Q$6*(W18-$Q$18)*(W18-$Q$18)",
      "type": "f",
      "section": "call_analysis"
    },
    "X20": {
      "value": "=$Q$20+$Q$4*(X18-$Q$18)+0.5*$Q$6*(X18-$Q$18)*(X18-$Q$18)",
      "type": "f",
      "section": "call_analysis"
    },
    "Y20": {
      "value": "=$Q$20+$Q$4*(Y18-$Q$18)+0.5*$Q$6*(Y18-$Q$18)*(Y18-$Q$18)",
      "type": "f",
      "section": "call_analysis"
    },
    "Z20": {
      "value": "=$Q$20+$Q$4*(Z18-$Q$18)+0.5*$Q$6*(Z18-$Q$18)*(Z18-$Q$18)",
      "type": "f",
      "section": "call_analysis"
    },
    "AA20": {
      "value": "=$Q$20+$Q$4*(AA18-$Q$18)+0.5*$Q$6*(AA18-$Q$18)*(AA18-$Q$18)",
      "type": "f",
      "section": "call_analysis"
    },
    "AB20": {
      "value": "=$Q$20+$Q$4*(AB18-$Q$18)+0.5*$Q$6*(AB18-$Q$18)*(AB18-$Q$18)",
      "type": "f",
      "section": "call_analysis"
    },
    "AC20": {
      "value": "=$Q$20+$Q$4*(AC18-$Q$18)+0.5*$Q$6*(AC18-$Q$18)*(AC18-$Q$18)",
      "type": "f",
      "section": "call_analysis"
    },
    "C21": {
      "value": "TS Predicted from n-0.25",
      "type": "s",
      "section": "call_analysis"
    },
    "E21": {
      "value": "=F14+F4*(E18-F18)+0.5*F6*(E18-F18)*(E18-F18)",
      "type": "f",
      "section": "call_analysis"
    },
    "F21": {
      "value": "=G14+G4*(F18-G18)+0.5*G6*(F18-G18)*(F18-G18)",
      "type": "f",
      "section": "call_analysis"
    },
    "G21": {
      "value": "=H14+H4*(G18-H18)+0.5*H6*(G18-H18)*(G18-H18)",
      "type": "f",
      "section": "call_analysis"
    },
    "H21": {
      "value": "=I14+I4*(H18-I18)+0.5*I6*(H18-I18)*(H18-I18)",
      "type": "f",
      "section": "call_analysis"
    },
    "I21": {
      "value": "=J14+J4*(I18-J18)+0.5*J6*(I18-J18)*(I18-J18)",
      "type": "f",
      "section": "call_analysis"
    },
    "J21": {
      "value": "=K14+K4*(J18-K18)+0.5*K6*(J18-K18)*(J18-K18)",
      "type": "f",
      "section": "call_analysis"
    },
    "K21": {
      "value": "=L14+L4*(K18-L18)+0.5*L6*(K18-L18)*(K18-L18)",
      "type": "f",
      "section": "call_analysis"
    },
    "L21": {
      "value": "=M14+M4*(L18-M18)+0.5*M6*(L18-M18)*(L18-M18)",
      "type": "f",
      "section": "call_analysis"
    },
    "M21": {
      "value": "=N14+N4*(M18-N18)+0.5*N6*(M18-N18)*(M18-N18)",
      "type": "f",
      "section": "call_analysis"
    },
    "N21": {
      "value": "=O14+O4*(N18-O18)+0.5*O6*(N18-O18)*(N18-O18)",
      "type": "f",
      "section": "call_analysis"
    },
    "O21": {
      "value": "=P14+P4*(O18-P18)+0.5*P6*(O18-P18)*(O18-P18)",
      "type": "f",
      "section": "call_analysis"
    },
    "P21": {
      "value": "=Q14+Q4*(P18-Q18)+0.5*Q6*(P18-Q18)*(P18-Q18)",
      "type": "f",
      "section": "call_analysis"
    },
    "Q21": {
      "value": "=Q14",
      "type": "f",
      "section": "call_analysis"
    },
    "R21": {
      "value": "=Q14+Q4*(R18-Q18)+0.5*Q6*(R18-Q18)*(R18-Q18)",
      "type": "f",
      "section": "call_analysis"
    },
    "S21": {
      "value": "=R14+R4*(S18-R18)+0.5*R6*(S18-R18)*(S18-R18)",
      "type": "f",
      "section": "call_analysis"
    },
    "T21": {
      "value": "=S14+S4*(T18-S18)+0.5*S6*(T18-S18)*(T18-S18)",
      "type": "f",
      "section": "call_analysis"
    },
    "U21": {
      "value": "=T14+T4*(U18-T18)+0.5*T6*(U18-T18)*(U18-T18)",
      "type": "f",
      "section": "call_analysis"
    },
    "V21": {
      "value": "=U14+U4*(V18-U18)+0.5*U6*(V18-U18)*(V18-U18)",
      "type": "f",
      "section": "call_analysis"
    },
    "W21": {
      "value": "=V14+V4*(W18-V18)+0.5*V6*(W18-V18)*(W18-V18)",
      "type": "f",
      "section": "call_analysis"
    },
    "X21": {
      "value": "=W14+W4*(X18-W18)+0.5*W6*(X18-W18)*(X18-W18)",
      "type": "f",
      "section": "call_analysis"
    },
    "Y21": {
      "value": "=X14+X4*(Y18-X18)+0.5*X6*(Y18-X18)*(Y18-X18)",
      "type": "f",
      "section": "call_analysis"
    },
    "Z21": {
      "value": "=Y14+Y4*(Z18-Y18)+0.5*Y6*(Z18-Y18)*(Z18-Y18)",
      "type": "f",
      "section": "call_analysis"
    },
    "AA21": {
      "value": "=Z14+Z4*(AA18-Z18)+0.5*Z6*(AA18-Z18)*(AA18-Z18)",
      "type": "f",
      "section": "call_analysis"
    },
    "AB21": {
      "value": "=AA14+AA4*(AB18-AA18)+0.5*AA6*(AB18-AA18)*(AB18-AA18)",
      "type": "f",
      "section": "call_analysis"
    },
    "AC21": {
      "value": "=AB14+AB4*(AC18-AB18)+0.5*AB6*(AC18-AB18)*(AC18-AB18)",
      "type": "f",
      "section": "call_analysis"
    },
    "C22": {
      "value": "Call TS0vA Diff",
      "type": "s",
      "section": "call_analysis"
    },
    "E22": {
      "value": "=E20-E19",
      "type": "f",
      "section": "call_analysis"
    },
    "F22": {
      "value": "=F20-F19",
      "type": "f",
      "section": "call_analysis"
    },
    "G22": {
      "value": "=G20-G19",
      "type": "f",
      "section": "call_analysis"
    },
    "H22": {
      "value": "=H20-H19",
      "type": "f",
      "section": "call_analysis"
    },
    "I22": {
      "value": "=I20-I19",
      "type": "f",
      "section": "call_analysis"
    },
    "J22": {
      "value": "=J20-J19",
      "type": "f",
      "section": "call_analysis"
    },
    "K22": {
      "value": "=K20-K19",
      "type": "f",
      "section": "call_analysis"
    },
    "L22": {
      "value": "=L20-L19",
      "type": "f",
      "section": "call_analysis"
    },
    "M22": {
      "value": "=M20-M19",
      "type": "f",
      "section": "call_analysis"
    },
    "N22": {
      "value": "=N20-N19",
      "type": "f",
      "section": "call_analysis"
    },
    "O22": {
      "value": "=O20-O19",
      "type": "f",
      "section": "call_analysis"
    },
    "P22": {
      "value": "=P20-P19",
      "type": "f",
      "section": "call_analysis"
    },
    "Q22": {
      "value": "=Q20-Q19",
      "type": "f",
      "section": "call_analysis"
    },
    "R22": {
      "value": "=R20-R19",
      "type": "f",
      "section": "call_analysis"
    },
    "S22": {
      "value": "=S20-S19",
      "type": "f",
      "section": "call_analysis"
    },
    "T22": {
      "value": "=T20-T19",
      "type": "f",
      "section": "call_analysis"
    },
    "U22": {
      "value": "=U20-U19",
      "type": "f",
      "section": "call_analysis"
    },
    "V22": {
      "value": "=V20-V19",
      "type": "f",
      "section": "call_analysis"
    },
    "W22": {
      "value": "=W20-W19",
      "type": "f",
      "section": "call_analysis"
    },
    "X22": {
      "value": "=X20-X19",
      "type": "f",
      "section": "call_analysis"
    },
    "Y22": {
      "value": "=Y20-Y19",
      "type": "f",
      "section": "call_analysis"
    },
    "Z22": {
      "value": "=Z20-Z19",
      "type": "f",
      "section": "call_analysis"
    },
    "AA22": {
      "value": "=AA20-AA19",
      "type": "f",
      "section": "call_analysis"
    },
    "AB22": {
      "value": "=AB20-AB19",
      "type": "f",
      "section": "call_analysis"
    },
    "AC22": {
      "value": "=AC20-AC19",
      "type": "f",
      "section": "call_analysis"
    },
    "C23": {
      "value": "Call TS-0.25vA Diff",
      "type": "s",
      "section": "call_analysis"
    },
    "E23": {
      "value": "=E21-E19",
      "type": "f",
      "section": "call_analysis"
    },
    "F23": {
      "value": "=F21-F19",
      "type": "f",
      "section": "call_analysis"
    },
    "G23": {
      "value": "=G21-G19",
      "type": "f",
      "section": "call_analysis"
    },
    "H23": {
      "value": "=H21-H19",
      "type": "f",
      "section": "call_analysis"
    },
    "I23": {
      "value": "=I21-I19",
      "type": "f",
      "section": "call_analysis"
    },
    "J23": {
      "value": "=J21-J19",
      "type": "f",
      "section": "call_analysis"
    },
    "K23": {
      "value": "=K21-K19",
      "type": "f",
      "section": "call_analysis"
    },
    "L23": {
      "value": "=L21-L19",
      "type": "f",
      "section": "call_analysis"
    },
    "M23": {
      "value": "=M21-M19",
      "type": "f",
      "section": "call_analysis"
    },
    "N23": {
      "value": "=N21-N19",
      "type": "f",
      "section": "call_analysis"
    },
    "O23": {
      "value": "=O21-O19",
      "type": "f",
      "section": "call_analysis"
    },
    "P23": {
      "value": "=P21-P19",
      "type": "f",
      "section": "call_analysis"
    },
    "Q23": {
      "value": "=Q21-Q19",
      "type": "f",
      "section": "call_analysis"
    },
    "R23": {
      "value": "=R21-R19",
      "type": "f",
      "section": "call_analysis"
    },
    "S23": {
      "value": "=S21-S19",
      "type": "f",
      "section": "call_analysis"
    },
    "T23": {
      "value": "=T21-T19",
      "type": "f",
      "section": "call_analysis"
    },
    "U23": {
      "value": "=U21-U19",
      "type": "f",
      "section": "call_analysis"
    },
    "V23": {
      "value": "=V21-V19",
      "type": "f",
      "section": "call_analysis"
    },
    "W23": {
      "value": "=W21-W19",
      "type": "f",
      "section": "call_analysis"
    },
    "X23": {
      "value": "=X21-X19",
      "type": "f",
      "section": "call_analysis"
    },
    "Y23": {
      "value": "=Y21-Y19",
      "type": "f",
      "section": "call_analysis"
    },
    "Z23": {
      "value": "=Z21-Z19",
      "type": "f",
      "section": "call_analysis"
    },
    "AA23": {
      "value": "=AA21-AA19",
      "type": "f",
      "section": "call_analysis"
    },
    "AB23": {
      "value": "=AB21-AB19",
      "type": "f",
      "section": "call_analysis"
    },
    "AC23": {
      "value": "=AC21-AC19",
      "type": "f",
      "section": "call_analysis"
    },
    "C25": {
      "value": "shift in bp",
      "type": "s",
      "section": "call_analysis"
    },
    "E25": {
      "value": "-48",
      "type": "n",
      "section": "call_analysis"
    },
    "F25": {
      "value": "-44",
      "type": "n",
      "section": "call_analysis"
    },
    "G25": {
      "value": "-40",
      "type": "n",
      "section": "call_analysis"
    },
    "H25": {
      "value": "-36",
      "type": "n",
      "section": "call_analysis"
    },
    "I25": {
      "value": "-32",
      "type": "n",
      "section": "call_analysis"
    },
    "J25": {
      "value": "-28",
      "type": "n",
      "section": "call_analysis"
    },
    "K25": {
      "value": "-24",
      "type": "n",
      "section": "call_analysis"
    },
    "L25": {
      "value": "-20",
      "type": "n",
      "section": "call_analysis"
    },
    "M25": {
      "value": "-16",
      "type": "n",
      "section": "call_analysis"
    },
    "N25": {
      "value": "-12",
      "type": "n",
      "section": "call_analysis"
    },
    "O25": {
      "value": "-8",
      "type": "n",
      "section": "call_analysis"
    },
    "P25": {
      "value": "-4",
      "type": "n",
      "section": "call_analysis"
    },
    "Q25": {
      "value": "0",
      "type": "n",
      "section": "call_analysis"
    },
    "R25": {
      "value": "4",
      "type": "n",
      "section": "call_analysis"
    },
    "S25": {
      "value": "8",
      "type": "n",
      "section": "call_analysis"
    },
    "T25": {
      "value": "12",
      "type": "n",
      "section": "call_analysis"
    },
    "U25": {
      "value": "16",
      "type": "n",
      "section": "call_analysis"
    },
    "V25": {
      "value": "20",
      "type": "n",
      "section": "call_analysis"
    },
    "W25": {
      "value": "24",
      "type": "n",
      "section": "call_analysis"
    },
    "X25": {
      "value": "28",
      "type": "n",
      "section": "call_analysis"
    },
    "Y25": {
      "value": "32",
      "type": "n",
      "section": "call_analysis"
    },
    "Z25": {
      "value": "36",
      "type": "n",
      "section": "call_analysis"
    },
    "AA25": {
      "value": "40",
      "type": "n",
      "section": "call_analysis"
    },
    "AB25": {
      "value": "44",
      "type": "n",
      "section": "call_analysis"
    },
    "AC25": {
      "value": "48",
      "type": "n",
      "section": "call_analysis"
    },
    "C26": {
      "value": "ACTANT PNL",
      "type": "s",
      "section": "call_analysis"
    },
    "E26": {
      "value": "=E19-$Q$19",
      "type": "f",
      "section": "call_analysis"
    },
    "F26": {
      "value": "=F19-$Q$19",
      "type": "f",
      "section": "call_analysis"
    },
    "G26": {
      "value": "=G19-$Q$19",
      "type": "f",
      "section": "call_analysis"
    },
    "H26": {
      "value": "=H19-$Q$19",
      "type": "f",
      "section": "call_analysis"
    },
    "I26": {
      "value": "=I19-$Q$19",
      "type": "f",
      "section": "call_analysis"
    },
    "J26": {
      "value": "=J19-$Q$19",
      "type": "f",
      "section": "call_analysis"
    },
    "K26": {
      "value": "=K19-$Q$19",
      "type": "f",
      "section": "call_analysis"
    },
    "L26": {
      "value": "=L19-$Q$19",
      "type": "f",
      "section": "call_analysis"
    },
    "M26": {
      "value": "=M19-$Q$19",
      "type": "f",
      "section": "call_analysis"
    },
    "N26": {
      "value": "=N19-$Q$19",
      "type": "f",
      "section": "call_analysis"
    },
    "O26": {
      "value": "=O19-$Q$19",
      "type": "f",
      "section": "call_analysis"
    },
    "P26": {
      "value": "=P19-$Q$19",
      "type": "f",
      "section": "call_analysis"
    },
    "Q26": {
      "value": "=Q19-$Q$19",
      "type": "f",
      "section": "call_analysis"
    },
    "R26": {
      "value": "=R19-$Q$19",
      "type": "f",
      "section": "call_analysis"
    },
    "S26": {
      "value": "=S19-$Q$19",
      "type": "f",
      "section": "call_analysis"
    },
    "T26": {
      "value": "=T19-$Q$19",
      "type": "f",
      "section": "call_analysis"
    },
    "U26": {
      "value": "=U19-$Q$19",
      "type": "f",
      "section": "call_analysis"
    },
    "V26": {
      "value": "=V19-$Q$19",
      "type": "f",
      "section": "call_analysis"
    },
    "W26": {
      "value": "=W19-$Q$19",
      "type": "f",
      "section": "call_analysis"
    },
    "X26": {
      "value": "=X19-$Q$19",
      "type": "f",
      "section": "call_analysis"
    },
    "Y26": {
      "value": "=Y19-$Q$19",
      "type": "f",
      "section": "call_analysis"
    },
    "Z26": {
      "value": "=Z19-$Q$19",
      "type": "f",
      "section": "call_analysis"
    },
    "AA26": {
      "value": "=AA19-$Q$19",
      "type": "f",
      "section": "call_analysis"
    },
    "AB26": {
      "value": "=AB19-$Q$19",
      "type": "f",
      "section": "call_analysis"
    },
    "AC26": {
      "value": "=AC19-$Q$19",
      "type": "f",
      "section": "call_analysis"
    },
    "C27": {
      "value": "TS0 PNL (cumlv)",
      "type": "s",
      "section": "call_analysis"
    },
    "E27": {
      "value": "=E20-$Q$20",
      "type": "f",
      "section": "call_analysis"
    },
    "F27": {
      "value": "=F20-$Q$20",
      "type": "f",
      "section": "call_analysis"
    },
    "G27": {
      "value": "=G20-$Q$20",
      "type": "f",
      "section": "call_analysis"
    },
    "H27": {
      "value": "=H20-$Q$20",
      "type": "f",
      "section": "call_analysis"
    },
    "I27": {
      "value": "=I20-$Q$20",
      "type": "f",
      "section": "call_analysis"
    },
    "J27": {
      "value": "=J20-$Q$20",
      "type": "f",
      "section": "call_analysis"
    },
    "K27": {
      "value": "=K20-$Q$20",
      "type": "f",
      "section": "call_analysis"
    },
    "L27": {
      "value": "=L20-$Q$20",
      "type": "f",
      "section": "call_analysis"
    },
    "M27": {
      "value": "=M20-$Q$20",
      "type": "f",
      "section": "call_analysis"
    },
    "N27": {
      "value": "=N20-$Q$20",
      "type": "f",
      "section": "call_analysis"
    },
    "O27": {
      "value": "=O20-$Q$20",
      "type": "f",
      "section": "call_analysis"
    },
    "P27": {
      "value": "=P20-$Q$20",
      "type": "f",
      "section": "call_analysis"
    },
    "Q27": {
      "value": "=Q20-$Q$20",
      "type": "f",
      "section": "call_analysis"
    },
    "R27": {
      "value": "=R20-$Q$20",
      "type": "f",
      "section": "call_analysis"
    },
    "S27": {
      "value": "=S20-$Q$20",
      "type": "f",
      "section": "call_analysis"
    },
    "T27": {
      "value": "=T20-$Q$20",
      "type": "f",
      "section": "call_analysis"
    },
    "U27": {
      "value": "=U20-$Q$20",
      "type": "f",
      "section": "call_analysis"
    },
    "V27": {
      "value": "=V20-$Q$20",
      "type": "f",
      "section": "call_analysis"
    },
    "W27": {
      "value": "=W20-$Q$20",
      "type": "f",
      "section": "call_analysis"
    },
    "X27": {
      "value": "=X20-$Q$20",
      "type": "f",
      "section": "call_analysis"
    },
    "Y27": {
      "value": "=Y20-$Q$20",
      "type": "f",
      "section": "call_analysis"
    },
    "Z27": {
      "value": "=Z20-$Q$20",
      "type": "f",
      "section": "call_analysis"
    },
    "AA27": {
      "value": "=AA20-$Q$20",
      "type": "f",
      "section": "call_analysis"
    },
    "AB27": {
      "value": "=AB20-$Q$20",
      "type": "f",
      "section": "call_analysis"
    },
    "AC27": {
      "value": "=AC20-$Q$20",
      "type": "f",
      "section": "call_analysis"
    },
    "C28": {
      "value": "TS-0.25 PNL (cumlv)",
      "type": "s",
      "section": "call_analysis"
    },
    "E28": {
      "value": "=E21-$Q$21",
      "type": "f",
      "section": "call_analysis"
    },
    "F28": {
      "value": "=F21-$Q$21",
      "type": "f",
      "section": "call_analysis"
    },
    "G28": {
      "value": "=G21-$Q$21",
      "type": "f",
      "section": "call_analysis"
    },
    "H28": {
      "value": "=H21-$Q$21",
      "type": "f",
      "section": "call_analysis"
    },
    "I28": {
      "value": "=I21-$Q$21",
      "type": "f",
      "section": "call_analysis"
    },
    "J28": {
      "value": "=J21-$Q$21",
      "type": "f",
      "section": "call_analysis"
    },
    "K28": {
      "value": "=K21-$Q$21",
      "type": "f",
      "section": "call_analysis"
    },
    "L28": {
      "value": "=L21-$Q$21",
      "type": "f",
      "section": "call_analysis"
    },
    "M28": {
      "value": "=M21-$Q$21",
      "type": "f",
      "section": "call_analysis"
    },
    "N28": {
      "value": "=N21-$Q$21",
      "type": "f",
      "section": "call_analysis"
    },
    "O28": {
      "value": "=O21-$Q$21",
      "type": "f",
      "section": "call_analysis"
    },
    "P28": {
      "value": "=P21-$Q$21",
      "type": "f",
      "section": "call_analysis"
    },
    "Q28": {
      "value": "=Q21-$Q$21",
      "type": "f",
      "section": "call_analysis"
    },
    "R28": {
      "value": "=R21-$Q$21",
      "type": "f",
      "section": "call_analysis"
    },
    "S28": {
      "value": "=S21-$Q$21",
      "type": "f",
      "section": "call_analysis"
    },
    "T28": {
      "value": "=T21-$Q$21",
      "type": "f",
      "section": "call_analysis"
    },
    "U28": {
      "value": "=U21-$Q$21",
      "type": "f",
      "section": "call_analysis"
    },
    "V28": {
      "value": "=V21-$Q$21",
      "type": "f",
      "section": "call_analysis"
    },
    "W28": {
      "value": "=W21-$Q$21",
      "type": "f",
      "section": "call_analysis"
    },
    "X28": {
      "value": "=X21-$Q$21",
      "type": "f",
      "section": "call_analysis"
    },
    "Y28": {
      "value": "=Y21-$Q$21",
      "type": "f",
      "section": "call_analysis"
    },
    "Z28": {
      "value": "=Z21-$Q$21",
      "type": "f",
      "section": "call_analysis"
    },
    "AA28": {
      "value": "=AA21-$Q$21",
      "type": "f",
      "section": "call_analysis"
    },
    "AB28": {
      "value": "=AB21-$Q$21",
      "type": "f",
      "section": "call_analysis"
    },
    "AC28": {
      "value": "=AC21-$Q$21",
      "type": "f",
      "section": "call_analysis"
    },
    "C29": {
      "value": "0DIFF",
      "type": "s",
      "section": "call_analysis"
    },
    "E29": {
      "value": "=E27-E26",
      "type": "f",
      "section": "call_analysis"
    },
    "F29": {
      "value": "=F27-F26",
      "type": "f",
      "section": "call_analysis"
    },
    "G29": {
      "value": "=G27-G26",
      "type": "f",
      "section": "call_analysis"
    },
    "H29": {
      "value": "=H27-H26",
      "type": "f",
      "section": "call_analysis"
    },
    "I29": {
      "value": "=I27-I26",
      "type": "f",
      "section": "call_analysis"
    },
    "J29": {
      "value": "=J27-J26",
      "type": "f",
      "section": "call_analysis"
    },
    "K29": {
      "value": "=K27-K26",
      "type": "f",
      "section": "call_analysis"
    },
    "L29": {
      "value": "=L27-L26",
      "type": "f",
      "section": "call_analysis"
    },
    "M29": {
      "value": "=M27-M26",
      "type": "f",
      "section": "call_analysis"
    },
    "N29": {
      "value": "=N27-N26",
      "type": "f",
      "section": "call_analysis"
    },
    "O29": {
      "value": "=O27-O26",
      "type": "f",
      "section": "call_analysis"
    },
    "P29": {
      "value": "=P27-P26",
      "type": "f",
      "section": "call_analysis"
    },
    "Q29": {
      "value": "=Q27-Q26",
      "type": "f",
      "section": "call_analysis"
    },
    "R29": {
      "value": "=R27-R26",
      "type": "f",
      "section": "call_analysis"
    },
    "S29": {
      "value": "=S27-S26",
      "type": "f",
      "section": "call_analysis"
    },
    "T29": {
      "value": "=T27-T26",
      "type": "f",
      "section": "call_analysis"
    },
    "U29": {
      "value": "=U27-U26",
      "type": "f",
      "section": "call_analysis"
    },
    "V29": {
      "value": "=V27-V26",
      "type": "f",
      "section": "call_analysis"
    },
    "W29": {
      "value": "=W27-W26",
      "type": "f",
      "section": "call_analysis"
    },
    "X29": {
      "value": "=X27-X26",
      "type": "f",
      "section": "call_analysis"
    },
    "Y29": {
      "value": "=Y27-Y26",
      "type": "f",
      "section": "call_analysis"
    },
    "Z29": {
      "value": "=Z27-Z26",
      "type": "f",
      "section": "call_analysis"
    },
    "AA29": {
      "value": "=AA27-AA26",
      "type": "f",
      "section": "call_analysis"
    },
    "AB29": {
      "value": "=AB27-AB26",
      "type": "f",
      "section": "call_analysis"
    },
    "AC29": {
      "value": "=AC27-AC26",
      "type": "f",
      "section": "call_analysis"
    },
    "C30": {
      "value": "-0.25DIFF",
      "type": "s",
      "section": "call_analysis"
    },
    "E30": {
      "value": "=E28-E26",
      "type": "f",
      "section": "call_analysis"
    },
    "F30": {
      "value": "=F28-F26",
      "type": "f",
      "section": "call_analysis"
    },
    "G30": {
      "value": "=G28-G26",
      "type": "f",
      "section": "call_analysis"
    },
    "H30": {
      "value": "=H28-H26",
      "type": "f",
      "section": "call_analysis"
    },
    "I30": {
      "value": "=I28-I26",
      "type": "f",
      "section": "call_analysis"
    },
    "J30": {
      "value": "=J28-J26",
      "type": "f",
      "section": "call_analysis"
    },
    "K30": {
      "value": "=K28-K26",
      "type": "f",
      "section": "call_analysis"
    },
    "L30": {
      "value": "=L28-L26",
      "type": "f",
      "section": "call_analysis"
    },
    "M30": {
      "value": "=M28-M26",
      "type": "f",
      "section": "call_analysis"
    },
    "N30": {
      "value": "=N28-N26",
      "type": "f",
      "section": "call_analysis"
    },
    "O30": {
      "value": "=O28-O26",
      "type": "f",
      "section": "call_analysis"
    },
    "P30": {
      "value": "=P28-P26",
      "type": "f",
      "section": "call_analysis"
    },
    "Q30": {
      "value": "=Q28-Q26",
      "type": "f",
      "section": "call_analysis"
    },
    "R30": {
      "value": "=R28-R26",
      "type": "f",
      "section": "call_analysis"
    },
    "S30": {
      "value": "=S28-S26",
      "type": "f",
      "section": "call_analysis"
    },
    "T30": {
      "value": "=T28-T26",
      "type": "f",
      "section": "call_analysis"
    },
    "U30": {
      "value": "=U28-U26",
      "type": "f",
      "section": "call_analysis"
    },
    "V30": {
      "value": "=V28-V26",
      "type": "f",
      "section": "call_analysis"
    },
    "W30": {
      "value": "=W28-W26",
      "type": "f",
      "section": "call_analysis"
    },
    "X30": {
      "value": "=X28-X26",
      "type": "f",
      "section": "call_analysis"
    },
    "Y30": {
      "value": "=Y28-Y26",
      "type": "f",
      "section": "call_analysis"
    },
    "Z30": {
      "value": "=Z28-Z26",
      "type": "f",
      "section": "call_analysis"
    },
    "AA30": {
      "value": "=AA28-AA26",
      "type": "f",
      "section": "call_analysis"
    },
    "AB30": {
      "value": "=AB28-AB26",
      "type": "f",
      "section": "call_analysis"
    },
    "AC30": {
      "value": "=AC28-AC26",
      "type": "f",
      "section": "call_analysis"
    },
    "C32": {
      "value": "shift in bp",
      "type": "s",
      "section": "put_analysis"
    },
    "E32": {
      "value": "-48",
      "type": "n",
      "section": "put_analysis"
    },
    "F32": {
      "value": "-44",
      "type": "n",
      "section": "put_analysis"
    },
    "G32": {
      "value": "-40",
      "type": "n",
      "section": "put_analysis"
    },
    "H32": {
      "value": "-36",
      "type": "n",
      "section": "put_analysis"
    },
    "I32": {
      "value": "-32",
      "type": "n",
      "section": "put_analysis"
    },
    "J32": {
      "value": "-28",
      "type": "n",
      "section": "put_analysis"
    },
    "K32": {
      "value": "-24",
      "type": "n",
      "section": "put_analysis"
    },
    "L32": {
      "value": "-20",
      "type": "n",
      "section": "put_analysis"
    },
    "M32": {
      "value": "-16",
      "type": "n",
      "section": "put_analysis"
    },
    "N32": {
      "value": "-12",
      "type": "n",
      "section": "put_analysis"
    },
    "O32": {
      "value": "-8",
      "type": "n",
      "section": "put_analysis"
    },
    "P32": {
      "value": "-4",
      "type": "n",
      "section": "put_analysis"
    },
    "Q32": {
      "value": "0",
      "type": "n",
      "section": "put_analysis"
    },
    "R32": {
      "value": "4",
      "type": "n",
      "section": "put_analysis"
    },
    "S32": {
      "value": "8",
      "type": "n",
      "section": "put_analysis"
    },
    "T32": {
      "value": "12",
      "type": "n",
      "section": "put_analysis"
    },
    "U32": {
      "value": "16",
      "type": "n",
      "section": "put_analysis"
    },
    "V32": {
      "value": "20",
      "type": "n",
      "section": "put_analysis"
    },
    "W32": {
      "value": "24",
      "type": "n",
      "section": "put_analysis"
    },
    "X32": {
      "value": "28",
      "type": "n",
      "section": "put_analysis"
    },
    "Y32": {
      "value": "32",
      "type": "n",
      "section": "put_analysis"
    },
    "Z32": {
      "value": "36",
      "type": "n",
      "section": "put_analysis"
    },
    "AA32": {
      "value": "40",
      "type": "n",
      "section": "put_analysis"
    },
    "AB32": {
      "value": "44",
      "type": "n",
      "section": "put_analysis"
    },
    "AC32": {
      "value": "48",
      "type": "n",
      "section": "put_analysis"
    },
    "C33": {
      "value": "Put Price ACTANT",
      "type": "s",
      "section": "put_analysis"
    },
    "E33": {
      "value": "=E15",
      "type": "f",
      "section": "put_analysis"
    },
    "F33": {
      "value": "=F15",
      "type": "f",
      "section": "put_analysis"
    },
    "G33": {
      "value": "=G15",
      "type": "f",
      "section": "put_analysis"
    },
    "H33": {
      "value": "=H15",
      "type": "f",
      "section": "put_analysis"
    },
    "I33": {
      "value": "=I15",
      "type": "f",
      "section": "put_analysis"
    },
    "J33": {
      "value": "=J15",
      "type": "f",
      "section": "put_analysis"
    },
    "K33": {
      "value": "=K15",
      "type": "f",
      "section": "put_analysis"
    },
    "L33": {
      "value": "=L15",
      "type": "f",
      "section": "put_analysis"
    },
    "M33": {
      "value": "=M15",
      "type": "f",
      "section": "put_analysis"
    },
    "N33": {
      "value": "=N15",
      "type": "f",
      "section": "put_analysis"
    },
    "O33": {
      "value": "=O15",
      "type": "f",
      "section": "put_analysis"
    },
    "P33": {
      "value": "=P15",
      "type": "f",
      "section": "put_analysis"
    },
    "Q33": {
      "value": "=Q15",
      "type": "f",
      "section": "put_analysis"
    },
    "R33": {
      "value": "=R15",
      "type": "f",
      "section": "put_analysis"
    },
    "S33": {
      "value": "=S15",
      "type": "f",
      "section": "put_analysis"
    },
    "T33": {
      "value": "=T15",
      "type": "f",
      "section": "put_analysis"
    },
    "U33": {
      "value": "=U15",
      "type": "f",
      "section": "put_analysis"
    },
    "V33": {
      "value": "=V15",
      "type": "f",
      "section": "put_analysis"
    },
    "W33": {
      "value": "=W15",
      "type": "f",
      "section": "put_analysis"
    },
    "X33": {
      "value": "=X15",
      "type": "f",
      "section": "put_analysis"
    },
    "Y33": {
      "value": "=Y15",
      "type": "f",
      "section": "put_analysis"
    },
    "Z33": {
      "value": "=Z15",
      "type": "f",
      "section": "put_analysis"
    },
    "AA33": {
      "value": "=AA15",
      "type": "f",
      "section": "put_analysis"
    },
    "AB33": {
      "value": "=AB15",
      "type": "f",
      "section": "put_analysis"
    },
    "AC33": {
      "value": "=AC15",
      "type": "f",
      "section": "put_analysis"
    },
    "C34": {
      "value": "TS Predicted from 0",
      "type": "s",
      "section": "put_analysis"
    },
    "E34": {
      "value": "=$Q$34+$Q$5*(E32-$Q$32)+0.5*$Q$6*(E32-$Q$32)*(E32-$Q$32)",
      "type": "f",
      "section": "put_analysis"
    },
    "F34": {
      "value": "=$Q$34+$Q$5*(F32-$Q$32)+0.5*$Q$6*(F32-$Q$32)*(F32-$Q$32)",
      "type": "f",
      "section": "put_analysis"
    },
    "G34": {
      "value": "=$Q$34+$Q$5*(G32-$Q$32)+0.5*$Q$6*(G32-$Q$32)*(G32-$Q$32)",
      "type": "f",
      "section": "put_analysis"
    },
    "H34": {
      "value": "=$Q$34+$Q$5*(H32-$Q$32)+0.5*$Q$6*(H32-$Q$32)*(H32-$Q$32)",
      "type": "f",
      "section": "put_analysis"
    },
    "I34": {
      "value": "=$Q$34+$Q$5*(I32-$Q$32)+0.5*$Q$6*(I32-$Q$32)*(I32-$Q$32)",
      "type": "f",
      "section": "put_analysis"
    },
    "J34": {
      "value": "=$Q$34+$Q$5*(J32-$Q$32)+0.5*$Q$6*(J32-$Q$32)*(J32-$Q$32)",
      "type": "f",
      "section": "put_analysis"
    },
    "K34": {
      "value": "=$Q$34+$Q$5*(K32-$Q$32)+0.5*$Q$6*(K32-$Q$32)*(K32-$Q$32)",
      "type": "f",
      "section": "put_analysis"
    },
    "L34": {
      "value": "=$Q$34+$Q$5*(L32-$Q$32)+0.5*$Q$6*(L32-$Q$32)*(L32-$Q$32)",
      "type": "f",
      "section": "put_analysis"
    },
    "M34": {
      "value": "=$Q$34+$Q$5*(M32-$Q$32)+0.5*$Q$6*(M32-$Q$32)*(M32-$Q$32)",
      "type": "f",
      "section": "put_analysis"
    },
    "N34": {
      "value": "=$Q$34+$Q$5*(N32-$Q$32)+0.5*$Q$6*(N32-$Q$32)*(N32-$Q$32)",
      "type": "f",
      "section": "put_analysis"
    },
    "O34": {
      "value": "=$Q$34+$Q$5*(O32-$Q$32)+0.5*$Q$6*(O32-$Q$32)*(O32-$Q$32)",
      "type": "f",
      "section": "put_analysis"
    },
    "P34": {
      "value": "=$Q$34+$Q$5*(P32-$Q$32)+0.5*$Q$6*(P32-$Q$32)*(P32-$Q$32)",
      "type": "f",
      "section": "put_analysis"
    },
    "Q34": {
      "value": "=Q15",
      "type": "f",
      "section": "put_analysis"
    },
    "R34": {
      "value": "=$Q$34+$Q$5*(R32-$Q$32)+0.5*$Q$6*(R32-$Q$32)*(R32-$Q$32)",
      "type": "f",
      "section": "put_analysis"
    },
    "S34": {
      "value": "=$Q$34+$Q$5*(S32-$Q$32)+0.5*$Q$6*(S32-$Q$32)*(S32-$Q$32)",
      "type": "f",
      "section": "put_analysis"
    },
    "T34": {
      "value": "=$Q$34+$Q$5*(T32-$Q$32)+0.5*$Q$6*(T32-$Q$32)*(T32-$Q$32)",
      "type": "f",
      "section": "put_analysis"
    },
    "U34": {
      "value": "=$Q$34+$Q$5*(U32-$Q$32)+0.5*$Q$6*(U32-$Q$32)*(U32-$Q$32)",
      "type": "f",
      "section": "put_analysis"
    },
    "V34": {
      "value": "=$Q$34+$Q$5*(V32-$Q$32)+0.5*$Q$6*(V32-$Q$32)*(V32-$Q$32)",
      "type": "f",
      "section": "put_analysis"
    },
    "W34": {
      "value": "=$Q$34+$Q$5*(W32-$Q$32)+0.5*$Q$6*(W32-$Q$32)*(W32-$Q$32)",
      "type": "f",
      "section": "put_analysis"
    },
    "X34": {
      "value": "=$Q$34+$Q$5*(X32-$Q$32)+0.5*$Q$6*(X32-$Q$32)*(X32-$Q$32)",
      "type": "f",
      "section": "put_analysis"
    },
    "Y34": {
      "value": "=$Q$34+$Q$5*(Y32-$Q$32)+0.5*$Q$6*(Y32-$Q$32)*(Y32-$Q$32)",
      "type": "f",
      "section": "put_analysis"
    },
    "Z34": {
      "value": "=$Q$34+$Q$5*(Z32-$Q$32)+0.5*$Q$6*(Z32-$Q$32)*(Z32-$Q$32)",
      "type": "f",
      "section": "put_analysis"
    },
    "AA34": {
      "value": "=$Q$34+$Q$5*(AA32-$Q$32)+0.5*$Q$6*(AA32-$Q$32)*(AA32-$Q$32)",
      "type": "f",
      "section": "put_analysis"
    },
    "AB34": {
      "value": "=$Q$34+$Q$5*(AB32-$Q$32)+0.5*$Q$6*(AB32-$Q$32)*(AB32-$Q$32)",
      "type": "f",
      "section": "put_analysis"
    },
    "AC34": {
      "value": "=$Q$34+$Q$5*(AC32-$Q$32)+0.5*$Q$6*(AC32-$Q$32)*(AC32-$Q$32)",
      "type": "f",
      "section": "put_analysis"
    },
    "C35": {
      "value": "TS Predicted from n-0.25",
      "type": "s",
      "section": "put_analysis"
    },
    "E35": {
      "value": "=F33+F5*(E32-F32)+0.5*F6*(E32-F32)*(E32-F32)",
      "type": "f",
      "section": "put_analysis"
    },
    "F35": {
      "value": "=G33+G5*(F32-G32)+0.5*G6*(F32-G32)*(F32-G32)",
      "type": "f",
      "section": "put_analysis"
    },
    "G35": {
      "value": "=H33+H5*(G32-H32)+0.5*H6*(G32-H32)*(G32-H32)",
      "type": "f",
      "section": "put_analysis"
    },
    "H35": {
      "value": "=I33+I5*(H32-I32)+0.5*I6*(H32-I32)*(H32-I32)",
      "type": "f",
      "section": "put_analysis"
    },
    "I35": {
      "value": "=J33+J5*(I32-J32)+0.5*J6*(I32-J32)*(I32-J32)",
      "type": "f",
      "section": "put_analysis"
    },
    "J35": {
      "value": "=K33+K5*(J32-K32)+0.5*K6*(J32-K32)*(J32-K32)",
      "type": "f",
      "section": "put_analysis"
    },
    "K35": {
      "value": "=L33+L5*(K32-L32)+0.5*L6*(K32-L32)*(K32-L32)",
      "type": "f",
      "section": "put_analysis"
    },
    "L35": {
      "value": "=M33+M5*(L32-M32)+0.5*M6*(L32-M32)*(L32-M32)",
      "type": "f",
      "section": "put_analysis"
    },
    "M35": {
      "value": "=N33+N5*(M32-N32)+0.5*N6*(M32-N32)*(M32-N32)",
      "type": "f",
      "section": "put_analysis"
    },
    "N35": {
      "value": "=O33+O5*(N32-O32)+0.5*O6*(N32-O32)*(N32-O32)",
      "type": "f",
      "section": "put_analysis"
    },
    "O35": {
      "value": "=P33+P5*(O32-P32)+0.5*P6*(O32-P32)*(O32-P32)",
      "type": "f",
      "section": "put_analysis"
    },
    "P35": {
      "value": "=Q33+Q5*(P32-Q32)+0.5*Q6*(P32-Q32)*(P32-Q32)",
      "type": "f",
      "section": "put_analysis"
    },
    "Q35": {
      "value": "=Q15",
      "type": "f",
      "section": "put_analysis"
    },
    "R35": {
      "value": "=Q33+Q5*(R32-Q32)+0.5*Q6*(R32-Q32)*(R32-Q32)",
      "type": "f",
      "section": "put_analysis"
    },
    "S35": {
      "value": "=R33+R5*(S32-R32)+0.5*R6*(S32-R32)*(S32-R32)",
      "type": "f",
      "section": "put_analysis"
    },
    "T35": {
      "value": "=S33+S5*(T32-S32)+0.5*S6*(T32-S32)*(T32-S32)",
      "type": "f",
      "section": "put_analysis"
    },
    "U35": {
      "value": "=T33+T5*(U32-T32)+0.5*T6*(U32-T32)*(U32-T32)",
      "type": "f",
      "section": "put_analysis"
    },
    "V35": {
      "value": "=U33+U5*(V32-U32)+0.5*U6*(V32-U32)*(V32-U32)",
      "type": "f",
      "section": "put_analysis"
    },
    "W35": {
      "value": "=V33+V5*(W32-V32)+0.5*V6*(W32-V32)*(W32-V32)",
      "type": "f",
      "section": "put_analysis"
    },
    "X35": {
      "value": "=W33+W5*(X32-W32)+0.5*W6*(X32-W32)*(X32-W32)",
      "type": "f",
      "section": "put_analysis"
    },
    "Y35": {
      "value": "=X33+X5*(Y32-X32)+0.5*X6*(Y32-X32)*(Y32-X32)",
      "type": "f",
      "section": "put_analysis"
    },
    "Z35": {
      "value": "=Y33+Y5*(Z32-Y32)+0.5*Y6*(Z32-Y32)*(Z32-Y32)",
      "type": "f",
      "section": "put_analysis"
    },
    "AA35": {
      "value": "=Z33+Z5*(AA32-Z32)+0.5*Z6*(AA32-Z32)*(AA32-Z32)",
      "type": "f",
      "section": "put_analysis"
    },
    "AB35": {
      "value": "=AA33+AA5*(AB32-AA32)+0.5*AA6*(AB32-AA32)*(AB32-AA32)",
      "type": "f",
      "section": "put_analysis"
    },
    "AC35": {
      "value": "=AB33+AB5*(AC32-AB32)+0.5*AB6*(AC32-AB32)*(AC32-AB32)",
      "type": "f",
      "section": "put_analysis"
    },
    "C36": {
      "value": "Call TS0vA Diff",
      "type": "s",
      "section": "put_analysis"
    },
    "E36": {
      "value": "=E34-E33",
      "type": "f",
      "section": "put_analysis"
    },
    "F36": {
      "value": "=F34-F33",
      "type": "f",
      "section": "put_analysis"
    },
    "G36": {
      "value": "=G34-G33",
      "type": "f",
      "section": "put_analysis"
    },
    "H36": {
      "value": "=H34-H33",
      "type": "f",
      "section": "put_analysis"
    },
    "I36": {
      "value": "=I34-I33",
      "type": "f",
      "section": "put_analysis"
    },
    "J36": {
      "value": "=J34-J33",
      "type": "f",
      "section": "put_analysis"
    },
    "K36": {
      "value": "=K34-K33",
      "type": "f",
      "section": "put_analysis"
    },
    "L36": {
      "value": "=L34-L33",
      "type": "f",
      "section": "put_analysis"
    },
    "M36": {
      "value": "=M34-M33",
      "type": "f",
      "section": "put_analysis"
    },
    "N36": {
      "value": "=N34-N33",
      "type": "f",
      "section": "put_analysis"
    },
    "O36": {
      "value": "=O34-O33",
      "type": "f",
      "section": "put_analysis"
    },
    "P36": {
      "value": "=P34-P33",
      "type": "f",
      "section": "put_analysis"
    },
    "Q36": {
      "value": "=Q34-Q33",
      "type": "f",
      "section": "put_analysis"
    },
    "R36": {
      "value": "=R34-R33",
      "type": "f",
      "section": "put_analysis"
    },
    "S36": {
      "value": "=S34-S33",
      "type": "f",
      "section": "put_analysis"
    },
    "T36": {
      "value": "=T34-T33",
      "type": "f",
      "section": "put_analysis"
    },
    "U36": {
      "value": "=U34-U33",
      "type": "f",
      "section": "put_analysis"
    },
    "V36": {
      "value": "=V34-V33",
      "type": "f",
      "section": "put_analysis"
    },
    "W36": {
      "value": "=W34-W33",
      "type": "f",
      "section": "put_analysis"
    },
    "X36": {
      "value": "=X34-X33",
      "type": "f",
      "section": "put_analysis"
    },
    "Y36": {
      "value": "=Y34-Y33",
      "type": "f",
      "section": "put_analysis"
    },
    "Z36": {
      "value": "=Z34-Z33",
      "type": "f",
      "section": "put_analysis"
    },
    "AA36": {
      "value": "=AA34-AA33",
      "type": "f",
      "section": "put_analysis"
    },
    "AB36": {
      "value": "=AB34-AB33",
      "type": "f",
      "section": "put_analysis"
    },
    "AC36": {
      "value": "=AC34-AC33",
      "type": "f",
      "section": "put_analysis"
    },
    "C37": {
      "value": "shift in bp",
      "type": "s",
      "section": "put_analysis"
    },
    "E37": {
      "value": "-48",
      "type": "n",
      "section": "put_analysis"
    },
    "F37": {
      "value": "-44",
      "type": "n",
      "section": "put_analysis"
    },
    "G37": {
      "value": "-40",
      "type": "n",
      "section": "put_analysis"
    },
    "H37": {
      "value": "-36",
      "type": "n",
      "section": "put_analysis"
    },
    "I37": {
      "value": "-32",
      "type": "n",
      "section": "put_analysis"
    },
    "J37": {
      "value": "-28",
      "type": "n",
      "section": "put_analysis"
    },
    "K37": {
      "value": "-24",
      "type": "n",
      "section": "put_analysis"
    },
    "L37": {
      "value": "-20",
      "type": "n",
      "section": "put_analysis"
    },
    "M37": {
      "value": "-16",
      "type": "n",
      "section": "put_analysis"
    },
    "N37": {
      "value": "-12",
      "type": "n",
      "section": "put_analysis"
    },
    "O37": {
      "value": "-8",
      "type": "n",
      "section": "put_analysis"
    },
    "P37": {
      "value": "-4",
      "type": "n",
      "section": "put_analysis"
    },
    "Q37": {
      "value": "0",
      "type": "n",
      "section": "put_analysis"
    },
    "R37": {
      "value": "4",
      "type": "n",
      "section": "put_analysis"
    },
    "S37": {
      "value": "8",
      "type": "n",
      "section": "put_analysis"
    },
    "T37": {
      "value": "12",
      "type": "n",
      "section": "put_analysis"
    },
    "U37": {
      "value": "16",
      "type": "n",
      "section": "put_analysis"
    },
    "V37": {
      "value": "20",
      "type": "n",
      "section": "put_analysis"
    },
    "W37": {
      "value": "24",
      "type": "n",
      "section": "put_analysis"
    },
    "X37": {
      "value": "28",
      "type": "n",
      "section": "put_analysis"
    },
    "Y37": {
      "value": "32",
      "type": "n",
      "section": "put_analysis"
    },
    "Z37": {
      "value": "36",
      "type": "n",
      "section": "put_analysis"
    },
    "AA37": {
      "value": "40",
      "type": "n",
      "section": "put_analysis"
    },
    "AB37": {
      "value": "44",
      "type": "n",
      "section": "put_analysis"
    },
    "AC37": {
      "value": "48",
      "type": "n",
      "section": "put_analysis"
    },
    "C39": {
      "value": "shift in bp",
      "type": "s",
      "section": "put_analysis"
    },
    "E39": {
      "value": "-48",
      "type": "n",
      "section": "put_analysis"
    },
    "F39": {
      "value": "-44",
      "type": "n",
      "section": "put_analysis"
    },
    "G39": {
      "value": "-40",
      "type": "n",
      "section": "put_analysis"
    },
    "H39": {
      "value": "-36",
      "type": "n",
      "section": "put_analysis"
    },
    "I39": {
      "value": "-32",
      "type": "n",
      "section": "put_analysis"
    },
    "J39": {
      "value": "-28",
      "type": "n",
      "section": "put_analysis"
    },
    "K39": {
      "value": "-24",
      "type": "n",
      "section": "put_analysis"
    },
    "L39": {
      "value": "-20",
      "type": "n",
      "section": "put_analysis"
    },
    "M39": {
      "value": "-16",
      "type": "n",
      "section": "put_analysis"
    },
    "N39": {
      "value": "-12",
      "type": "n",
      "section": "put_analysis"
    },
    "O39": {
      "value": "-8",
      "type": "n",
      "section": "put_analysis"
    },
    "P39": {
      "value": "-4",
      "type": "n",
      "section": "put_analysis"
    },
    "Q39": {
      "value": "0",
      "type": "n",
      "section": "put_analysis"
    },
    "R39": {
      "value": "4",
      "type": "n",
      "section": "put_analysis"
    },
    "S39": {
      "value": "8",
      "type": "n",
      "section": "put_analysis"
    },
    "T39": {
      "value": "12",
      "type": "n",
      "section": "put_analysis"
    },
    "U39": {
      "value": "16",
      "type": "n",
      "section": "put_analysis"
    },
    "V39": {
      "value": "20",
      "type": "n",
      "section": "put_analysis"
    },
    "W39": {
      "value": "24",
      "type": "n",
      "section": "put_analysis"
    },
    "X39": {
      "value": "28",
      "type": "n",
      "section": "put_analysis"
    },
    "Y39": {
      "value": "32",
      "type": "n",
      "section": "put_analysis"
    },
    "Z39": {
      "value": "36",
      "type": "n",
      "section": "put_analysis"
    },
    "AA39": {
      "value": "40",
      "type": "n",
      "section": "put_analysis"
    },
    "AB39": {
      "value": "44",
      "type": "n",
      "section": "put_analysis"
    },
    "AC39": {
      "value": "48",
      "type": "n",
      "section": "put_analysis"
    },
    "C40": {
      "value": "ACTANT PNL",
      "type": "s",
      "section": "put_analysis"
    },
    "E40": {
      "value": "=E15-$Q$15",
      "type": "f",
      "section": "put_analysis"
    },
    "F40": {
      "value": "=F15-$Q$15",
      "type": "f",
      "section": "put_analysis"
    },
    "G40": {
      "value": "=G15-$Q$15",
      "type": "f",
      "section": "put_analysis"
    },
    "H40": {
      "value": "=H15-$Q$15",
      "type": "f",
      "section": "put_analysis"
    },
    "I40": {
      "value": "=I15-$Q$15",
      "type": "f",
      "section": "put_analysis"
    },
    "J40": {
      "value": "=J15-$Q$15",
      "type": "f",
      "section": "put_analysis"
    },
    "K40": {
      "value": "=K15-$Q$15",
      "type": "f",
      "section": "put_analysis"
    },
    "L40": {
      "value": "=L15-$Q$15",
      "type": "f",
      "section": "put_analysis"
    },
    "M40": {
      "value": "=M15-$Q$15",
      "type": "f",
      "section": "put_analysis"
    },
    "N40": {
      "value": "=N15-$Q$15",
      "type": "f",
      "section": "put_analysis"
    },
    "O40": {
      "value": "=O15-$Q$15",
      "type": "f",
      "section": "put_analysis"
    },
    "P40": {
      "value": "=P15-$Q$15",
      "type": "f",
      "section": "put_analysis"
    },
    "Q40": {
      "value": "=Q15-$Q$15",
      "type": "f",
      "section": "put_analysis"
    },
    "R40": {
      "value": "=R15-$Q$15",
      "type": "f",
      "section": "put_analysis"
    },
    "S40": {
      "value": "=S15-$Q$15",
      "type": "f",
      "section": "put_analysis"
    },
    "T40": {
      "value": "=T15-$Q$15",
      "type": "f",
      "section": "put_analysis"
    },
    "U40": {
      "value": "=U15-$Q$15",
      "type": "f",
      "section": "put_analysis"
    },
    "V40": {
      "value": "=V15-$Q$15",
      "type": "f",
      "section": "put_analysis"
    },
    "W40": {
      "value": "=W15-$Q$15",
      "type": "f",
      "section": "put_analysis"
    },
    "X40": {
      "value": "=X15-$Q$15",
      "type": "f",
      "section": "put_analysis"
    },
    "Y40": {
      "value": "=Y15-$Q$15",
      "type": "f",
      "section": "put_analysis"
    },
    "Z40": {
      "value": "=Z15-$Q$15",
      "type": "f",
      "section": "put_analysis"
    },
    "AA40": {
      "value": "=AA15-$Q$15",
      "type": "f",
      "section": "put_analysis"
    },
    "AB40": {
      "value": "=AB15-$Q$15",
      "type": "f",
      "section": "put_analysis"
    },
    "AC40": {
      "value": "=AC15-$Q$15",
      "type": "f",
      "section": "put_analysis"
    },
    "C41": {
      "value": "TS0 PNL (cumlv)",
      "type": "s",
      "section": "put_analysis"
    },
    "E41": {
      "value": "=E34-$Q$34",
      "type": "f",
      "section": "put_analysis"
    },
    "F41": {
      "value": "=F34-$Q$34",
      "type": "f",
      "section": "put_analysis"
    },
    "G41": {
      "value": "=G34-$Q$34",
      "type": "f",
      "section": "put_analysis"
    },
    "H41": {
      "value": "=H34-$Q$34",
      "type": "f",
      "section": "put_analysis"
    },
    "I41": {
      "value": "=I34-$Q$34",
      "type": "f",
      "section": "put_analysis"
    },
    "J41": {
      "value": "=J34-$Q$34",
      "type": "f",
      "section": "put_analysis"
    },
    "K41": {
      "value": "=K34-$Q$34",
      "type": "f",
      "section": "put_analysis"
    },
    "L41": {
      "value": "=L34-$Q$34",
      "type": "f",
      "section": "put_analysis"
    },
    "M41": {
      "value": "=M34-$Q$34",
      "type": "f",
      "section": "put_analysis"
    },
    "N41": {
      "value": "=N34-$Q$34",
      "type": "f",
      "section": "put_analysis"
    },
    "O41": {
      "value": "=O34-$Q$34",
      "type": "f",
      "section": "put_analysis"
    },
    "P41": {
      "value": "=P34-$Q$34",
      "type": "f",
      "section": "put_analysis"
    },
    "Q41": {
      "value": "=Q34-$Q$34",
      "type": "f",
      "section": "put_analysis"
    },
    "R41": {
      "value": "=R34-$Q$34",
      "type": "f",
      "section": "put_analysis"
    },
    "S41": {
      "value": "=S34-$Q$34",
      "type": "f",
      "section": "put_analysis"
    },
    "T41": {
      "value": "=T34-$Q$34",
      "type": "f",
      "section": "put_analysis"
    },
    "U41": {
      "value": "=U34-$Q$34",
      "type": "f",
      "section": "put_analysis"
    },
    "V41": {
      "value": "=V34-$Q$34",
      "type": "f",
      "section": "put_analysis"
    },
    "W41": {
      "value": "=W34-$Q$34",
      "type": "f",
      "section": "put_analysis"
    },
    "X41": {
      "value": "=X34-$Q$34",
      "type": "f",
      "section": "put_analysis"
    },
    "Y41": {
      "value": "=Y34-$Q$34",
      "type": "f",
      "section": "put_analysis"
    },
    "Z41": {
      "value": "=Z34-$Q$34",
      "type": "f",
      "section": "put_analysis"
    },
    "AA41": {
      "value": "=AA34-$Q$34",
      "type": "f",
      "section": "put_analysis"
    },
    "AB41": {
      "value": "=AB34-$Q$34",
      "type": "f",
      "section": "put_analysis"
    },
    "AC41": {
      "value": "=AC34-$Q$34",
      "type": "f",
      "section": "put_analysis"
    },
    "C42": {
      "value": "TS-0.25 PNL (cumlv)",
      "type": "s",
      "section": "put_analysis"
    },
    "E42": {
      "value": "=E35-$Q$35",
      "type": "f",
      "section": "put_analysis"
    },
    "F42": {
      "value": "=F35-$Q$35",
      "type": "f",
      "section": "put_analysis"
    },
    "G42": {
      "value": "=G35-$Q$35",
      "type": "f",
      "section": "put_analysis"
    },
    "H42": {
      "value": "=H35-$Q$35",
      "type": "f",
      "section": "put_analysis"
    },
    "I42": {
      "value": "=I35-$Q$35",
      "type": "f",
      "section": "put_analysis"
    },
    "J42": {
      "value": "=J35-$Q$35",
      "type": "f",
      "section": "put_analysis"
    },
    "K42": {
      "value": "=K35-$Q$35",
      "type": "f",
      "section": "put_analysis"
    },
    "L42": {
      "value": "=L35-$Q$35",
      "type": "f",
      "section": "put_analysis"
    },
    "M42": {
      "value": "=M35-$Q$35",
      "type": "f",
      "section": "put_analysis"
    },
    "N42": {
      "value": "=N35-$Q$35",
      "type": "f",
      "section": "put_analysis"
    },
    "O42": {
      "value": "=O35-$Q$35",
      "type": "f",
      "section": "put_analysis"
    },
    "P42": {
      "value": "=P35-$Q$35",
      "type": "f",
      "section": "put_analysis"
    },
    "Q42": {
      "value": "=Q35-$Q$35",
      "type": "f",
      "section": "put_analysis"
    },
    "R42": {
      "value": "=R35-$Q$35",
      "type": "f",
      "section": "put_analysis"
    },
    "S42": {
      "value": "=S35-$Q$35",
      "type": "f",
      "section": "put_analysis"
    },
    "T42": {
      "value": "=T35-$Q$35",
      "type": "f",
      "section": "put_analysis"
    },
    "U42": {
      "value": "=U35-$Q$35",
      "type": "f",
      "section": "put_analysis"
    },
    "V42": {
      "value": "=V35-$Q$35",
      "type": "f",
      "section": "put_analysis"
    },
    "W42": {
      "value": "=W35-$Q$35",
      "type": "f",
      "section": "put_analysis"
    },
    "X42": {
      "value": "=X35-$Q$35",
      "type": "f",
      "section": "put_analysis"
    },
    "Y42": {
      "value": "=Y35-$Q$35",
      "type": "f",
      "section": "put_analysis"
    },
    "Z42": {
      "value": "=Z35-$Q$35",
      "type": "f",
      "section": "put_analysis"
    },
    "AA42": {
      "value": "=AA35-$Q$35",
      "type": "f",
      "section": "put_analysis"
    },
    "AB42": {
      "value": "=AB35-$Q$35",
      "type": "f",
      "section": "put_analysis"
    },
    "AC42": {
      "value": "=AC35-$Q$35",
      "type": "f",
      "section": "put_analysis"
    },
    "C43": {
      "value": "0DIFF",
      "type": "s",
      "section": "put_analysis"
    },
    "E43": {
      "value": "=E41-E40",
      "type": "f",
      "section": "put_analysis"
    },
    "F43": {
      "value": "=F41-F40",
      "type": "f",
      "section": "put_analysis"
    },
    "G43": {
      "value": "=G41-G40",
      "type": "f",
      "section": "put_analysis"
    },
    "H43": {
      "value": "=H41-H40",
      "type": "f",
      "section": "put_analysis"
    },
    "I43": {
      "value": "=I41-I40",
      "type": "f",
      "section": "put_analysis"
    },
    "J43": {
      "value": "=J41-J40",
      "type": "f",
      "section": "put_analysis"
    },
    "K43": {
      "value": "=K41-K40",
      "type": "f",
      "section": "put_analysis"
    },
    "L43": {
      "value": "=L41-L40",
      "type": "f",
      "section": "put_analysis"
    },
    "M43": {
      "value": "=M41-M40",
      "type": "f",
      "section": "put_analysis"
    },
    "N43": {
      "value": "=N41-N40",
      "type": "f",
      "section": "put_analysis"
    },
    "O43": {
      "value": "=O41-O40",
      "type": "f",
      "section": "put_analysis"
    },
    "P43": {
      "value": "=P41-P40",
      "type": "f",
      "section": "put_analysis"
    },
    "Q43": {
      "value": "=Q41-Q40",
      "type": "f",
      "section": "put_analysis"
    },
    "R43": {
      "value": "=R41-R40",
      "type": "f",
      "section": "put_analysis"
    },
    "S43": {
      "value": "=S41-S40",
      "type": "f",
      "section": "put_analysis"
    },
    "T43": {
      "value": "=T41-T40",
      "type": "f",
      "section": "put_analysis"
    },
    "U43": {
      "value": "=U41-U40",
      "type": "f",
      "section": "put_analysis"
    },
    "V43": {
      "value": "=V41-V40",
      "type": "f",
      "section": "put_analysis"
    },
    "W43": {
      "value": "=W41-W40",
      "type": "f",
      "section": "put_analysis"
    },
    "X43": {
      "value": "=X41-X40",
      "type": "f",
      "section": "put_analysis"
    },
    "Y43": {
      "value": "=Y41-Y40",
      "type": "f",
      "section": "put_analysis"
    },
    "Z43": {
      "value": "=Z41-Z40",
      "type": "f",
      "section": "put_analysis"
    },
    "AA43": {
      "value": "=AA41-AA40",
      "type": "f",
      "section": "put_analysis"
    },
    "AB43": {
      "value": "=AB41-AB40",
      "type": "f",
      "section": "put_analysis"
    },
    "AC43": {
      "value": "=AC41-AC40",
      "type": "f",
      "section": "put_analysis"
    },
    "C44": {
      "value": "-0.25DIFF",
      "type": "s",
      "section": "put_analysis"
    },
    "E44": {
      "value": "=E42-E40",
      "type": "f",
      "section": "put_analysis"
    },
    "F44": {
      "value": "=F42-F40",
      "type": "f",
      "section": "put_analysis"
    },
    "G44": {
      "value": "=G42-G40",
      "type": "f",
      "section": "put_analysis"
    },
    "H44": {
      "value": "=H42-H40",
      "type": "f",
      "section": "put_analysis"
    },
    "I44": {
      "value": "=I42-I40",
      "type": "f",
      "section": "put_analysis"
    },
    "J44": {
      "value": "=J42-J40",
      "type": "f",
      "section": "put_analysis"
    },
    "K44": {
      "value": "=K42-K40",
      "type": "f",
      "section": "put_analysis"
    },
    "L44": {
      "value": "=L42-L40",
      "type": "f",
      "section": "put_analysis"
    },
    "M44": {
      "value": "=M42-M40",
      "type": "f",
      "section": "put_analysis"
    },
    "N44": {
      "value": "=N42-N40",
      "type": "f",
      "section": "put_analysis"
    },
    "O44": {
      "value": "=O42-O40",
      "type": "f",
      "section": "put_analysis"
    },
    "P44": {
      "value": "=P42-P40",
      "type": "f",
      "section": "put_analysis"
    },
    "Q44": {
      "value": "=Q42-Q40",
      "type": "f",
      "section": "put_analysis"
    },
    "R44": {
      "value": "=R42-R40",
      "type": "f",
      "section": "put_analysis"
    },
    "S44": {
      "value": "=S42-S40",
      "type": "f",
      "section": "put_analysis"
    },
    "T44": {
      "value": "=T42-T40",
      "type": "f",
      "section": "put_analysis"
    },
    "U44": {
      "value": "=U42-U40",
      "type": "f",
      "section": "put_analysis"
    },
    "V44": {
      "value": "=V42-V40",
      "type": "f",
      "section": "put_analysis"
    },
    "W44": {
      "value": "=W42-W40",
      "type": "f",
      "section": "put_analysis"
    },
    "X44": {
      "value": "=X42-X40",
      "type": "f",
      "section": "put_analysis"
    },
    "Y44": {
      "value": "=Y42-Y40",
      "type": "f",
      "section": "put_analysis"
    },
    "Z44": {
      "value": "=Z42-Z40",
      "type": "f",
      "section": "put_analysis"
    },
    "AA44": {
      "value": "=AA42-AA40",
      "type": "f",
      "section": "put_analysis"
    },
    "AB44": {
      "value": "=AB42-AB40",
      "type": "f",
      "section": "put_analysis"
    },
    "AC44": {
      "value": "=AC42-AC40",
      "type": "f",
      "section": "put_analysis"
    }
  },
  "dependencies_graph": {
    "E19": [
      "E14"
    ],
    "F19": [
      "F14"
    ],
    "G19": [
      "G14"
    ],
    "H19": [
      "H14"
    ],
    "I19": [
      "I14"
    ],
    "J19": [
      "J14"
    ],
    "K19": [
      "K14"
    ],
    "L19": [
      "L14"
    ],
    "M19": [
      "M14"
    ],
    "N19": [
      "N14"
    ],
    "O19": [
      "O14"
    ],
    "P19": [
      "P14"
    ],
    "Q19": [
      "Q14"
    ],
    "R19": [
      "R14"
    ],
    "S19": [
      "S14"
    ],
    "T19": [
      "T14"
    ],
    "U19": [
      "U14"
    ],
    "V19": [
      "V14"
    ],
    "W19": [
      "W14"
    ],
    "X19": [
      "X14"
    ],
    "Y19": [
      "Y14"
    ],
    "Z19": [
      "Z14"
    ],
    "AA19": [
      "AA14"
    ],
    "AB19": [
      "AB14"
    ],
    "AC19": [
      "AC14"
    ],
    "E20": [
      "$Q$20",
      "$Q$4",
      "E18",
      "$Q$18",
      "$Q$6"
    ],
    "F20": [
      "$Q$20",
      "$Q$4",
      "F18",
      "$Q$18",
      "$Q$6"
    ],
    "G20": [
      "$Q$20",
      "$Q$4",
      "G18",
      "$Q$18",
      "$Q$6"
    ],
    "H20": [
      "$Q$20",
      "$Q$4",
      "H18",
      "$Q$18",
      "$Q$6"
    ],
    "I20": [
      "$Q$20",
      "$Q$4",
      "I18",
      "$Q$18",
      "$Q$6"
    ],
    "J20": [
      "$Q$20",
      "$Q$4",
      "J18",
      "$Q$18",
      "$Q$6"
    ],
    "K20": [
      "$Q$20",
      "$Q$4",
      "K18",
      "$Q$18",
      "$Q$6"
    ],
    "L20": [
      "$Q$20",
      "$Q$4",
      "L18",
      "$Q$18",
      "$Q$6"
    ],
    "M20": [
      "$Q$20",
      "$Q$4",
      "M18",
      "$Q$18",
      "$Q$6"
    ],
    "N20": [
      "$Q$20",
      "$Q$4",
      "N18",
      "$Q$18",
      "$Q$6"
    ],
    "O20": [
      "$Q$20",
      "$Q$4",
      "O18",
      "$Q$18",
      "$Q$6"
    ],
    "P20": [
      "$Q$20",
      "$Q$4",
      "P18",
      "$Q$18",
      "$Q$6"
    ],
    "Q20": [
      "Q14"
    ],
    "R20": [
      "$Q$20",
      "$Q$4",
      "R18",
      "$Q$18",
      "$Q$6"
    ],
    "S20": [
      "$Q$20",
      "$Q$4",
      "S18",
      "$Q$18",
      "$Q$6"
    ],
    "T20": [
      "$Q$20",
      "$Q$4",
      "T18",
      "$Q$18",
      "$Q$6"
    ],
    "U20": [
      "$Q$20",
      "$Q$4",
      "U18",
      "$Q$18",
      "$Q$6"
    ],
    "V20": [
      "$Q$20",
      "$Q$4",
      "V18",
      "$Q$18",
      "$Q$6"
    ],
    "W20": [
      "$Q$20",
      "$Q$4",
      "W18",
      "$Q$18",
      "$Q$6"
    ],
    "X20": [
      "$Q$20",
      "$Q$4",
      "X18",
      "$Q$18",
      "$Q$6"
    ],
    "Y20": [
      "$Q$20",
      "$Q$4",
      "Y18",
      "$Q$18",
      "$Q$6"
    ],
    "Z20": [
      "$Q$20",
      "$Q$4",
      "Z18",
      "$Q$18",
      "$Q$6"
    ],
    "AA20": [
      "$Q$20",
      "$Q$4",
      "AA18",
      "$Q$18",
      "$Q$6"
    ],
    "AB20": [
      "$Q$20",
      "$Q$4",
      "AB18",
      "$Q$18",
      "$Q$6"
    ],
    "AC20": [
      "$Q$20",
      "$Q$4",
      "AC18",
      "$Q$18",
      "$Q$6"
    ],
    "E21": [
      "F14",
      "F4",
      "E18",
      "F18",
      "F6"
    ],
    "F21": [
      "G14",
      "G4",
      "F18",
      "G18",
      "G6"
    ],
    "G21": [
      "H14",
      "H4",
      "G18",
      "H18",
      "H6"
    ],
    "H21": [
      "I14",
      "I4",
      "H18",
      "I18",
      "I6"
    ],
    "I21": [
      "J14",
      "J4",
      "I18",
      "J18",
      "J6"
    ],
    "J21": [
      "K14",
      "K4",
      "J18",
      "K18",
      "K6"
    ],
    "K21": [
      "L14",
      "L4",
      "K18",
      "L18",
      "L6"
    ],
    "L21": [
      "M14",
      "M4",
      "L18",
      "M18",
      "M6"
    ],
    "M21": [
      "N14",
      "N4",
      "M18",
      "N18",
      "N6"
    ],
    "N21": [
      "O14",
      "O4",
      "N18",
      "O18",
      "O6"
    ],
    "O21": [
      "P14",
      "P4",
      "O18",
      "P18",
      "P6"
    ],
    "P21": [
      "Q14",
      "Q4",
      "P18",
      "Q18",
      "Q6"
    ],
    "Q21": [
      "Q14"
    ],
    "R21": [
      "Q14",
      "Q4",
      "R18",
      "Q18",
      "Q6"
    ],
    "S21": [
      "R14",
      "R4",
      "S18",
      "R18",
      "R6"
    ],
    "T21": [
      "S14",
      "S4",
      "T18",
      "S18",
      "S6"
    ],
    "U21": [
      "T14",
      "T4",
      "U18",
      "T18",
      "T6"
    ],
    "V21": [
      "U14",
      "U4",
      "V18",
      "U18",
      "U6"
    ],
    "W21": [
      "V14",
      "V4",
      "W18",
      "V18",
      "V6"
    ],
    "X21": [
      "W14",
      "W4",
      "X18",
      "W18",
      "W6"
    ],
    "Y21": [
      "X14",
      "X4",
      "Y18",
      "X18",
      "X6"
    ],
    "Z21": [
      "Y14",
      "Y4",
      "Z18",
      "Y18",
      "Y6"
    ],
    "AA21": [
      "Z14",
      "Z4",
      "AA18",
      "Z18",
      "Z6"
    ],
    "AB21": [
      "AA14",
      "AA4",
      "AB18",
      "AA18",
      "AA6"
    ],
    "AC21": [
      "AB14",
      "AB4",
      "AC18",
      "AB18",
      "AB6"
    ],
    "E22": [
      "E20",
      "E19"
    ],
    "F22": [
      "F20",
      "F19"
    ],
    "G22": [
      "G20",
      "G19"
    ],
    "H22": [
      "H20",
      "H19"
    ],
    "I22": [
      "I20",
      "I19"
    ],
    "J22": [
      "J20",
      "J19"
    ],
    "K22": [
      "K20",
      "K19"
    ],
    "L22": [
      "L20",
      "L19"
    ],
    "M22": [
      "M20",
      "M19"
    ],
    "N22": [
      "N20",
      "N19"
    ],
    "O22": [
      "O20",
      "O19"
    ],
    "P22": [
      "P20",
      "P19"
    ],
    "Q22": [
      "Q20",
      "Q19"
    ],
    "R22": [
      "R20",
      "R19"
    ],
    "S22": [
      "S20",
      "S19"
    ],
    "T22": [
      "T20",
      "T19"
    ],
    "U22": [
      "U20",
      "U19"
    ],
    "V22": [
      "V20",
      "V19"
    ],
    "W22": [
      "W20",
      "W19"
    ],
    "X22": [
      "X20",
      "X19"
    ],
    "Y22": [
      "Y20",
      "Y19"
    ],
    "Z22": [
      "Z20",
      "Z19"
    ],
    "AA22": [
      "AA20",
      "AA19"
    ],
    "AB22": [
      "AB20",
      "AB19"
    ],
    "AC22": [
      "AC20",
      "AC19"
    ],
    "E23": [
      "E21",
      "E19"
    ],
    "F23": [
      "F21",
      "F19"
    ],
    "G23": [
      "G21",
      "G19"
    ],
    "H23": [
      "H21",
      "H19"
    ],
    "I23": [
      "I21",
      "I19"
    ],
    "J23": [
      "J21",
      "J19"
    ],
    "K23": [
      "K21",
      "K19"
    ],
    "L23": [
      "L21",
      "L19"
    ],
    "M23": [
      "M21",
      "M19"
    ],
    "N23": [
      "N21",
      "N19"
    ],
    "O23": [
      "O21",
      "O19"
    ],
    "P23": [
      "P21",
      "P19"
    ],
    "Q23": [
      "Q21",
      "Q19"
    ],
    "R23": [
      "R21",
      "R19"
    ],
    "S23": [
      "S21",
      "S19"
    ],
    "T23": [
      "T21",
      "T19"
    ],
    "U23": [
      "U21",
      "U19"
    ],
    "V23": [
      "V21",
      "V19"
    ],
    "W23": [
      "W21",
      "W19"
    ],
    "X23": [
      "X21",
      "X19"
    ],
    "Y23": [
      "Y21",
      "Y19"
    ],
    "Z23": [
      "Z21",
      "Z19"
    ],
    "AA23": [
      "AA21",
      "AA19"
    ],
    "AB23": [
      "AB21",
      "AB19"
    ],
    "AC23": [
      "AC21",
      "AC19"
    ],
    "E26": [
      "E19",
      "$Q$19"
    ],
    "F26": [
      "F19",
      "$Q$19"
    ],
    "G26": [
      "G19",
      "$Q$19"
    ],
    "H26": [
      "H19",
      "$Q$19"
    ],
    "I26": [
      "I19",
      "$Q$19"
    ],
    "J26": [
      "J19",
      "$Q$19"
    ],
    "K26": [
      "K19",
      "$Q$19"
    ],
    "L26": [
      "L19",
      "$Q$19"
    ],
    "M26": [
      "M19",
      "$Q$19"
    ],
    "N26": [
      "N19",
      "$Q$19"
    ],
    "O26": [
      "O19",
      "$Q$19"
    ],
    "P26": [
      "P19",
      "$Q$19"
    ],
    "Q26": [
      "Q19",
      "$Q$19"
    ],
    "R26": [
      "R19",
      "$Q$19"
    ],
    "S26": [
      "S19",
      "$Q$19"
    ],
    "T26": [
      "T19",
      "$Q$19"
    ],
    "U26": [
      "U19",
      "$Q$19"
    ],
    "V26": [
      "V19",
      "$Q$19"
    ],
    "W26": [
      "W19",
      "$Q$19"
    ],
    "X26": [
      "X19",
      "$Q$19"
    ],
    "Y26": [
      "Y19",
      "$Q$19"
    ],
    "Z26": [
      "Z19",
      "$Q$19"
    ],
    "AA26": [
      "AA19",
      "$Q$19"
    ],
    "AB26": [
      "AB19",
      "$Q$19"
    ],
    "AC26": [
      "AC19",
      "$Q$19"
    ],
    "E27": [
      "E20",
      "$Q$20"
    ],
    "F27": [
      "F20",
      "$Q$20"
    ],
    "G27": [
      "G20",
      "$Q$20"
    ],
    "H27": [
      "H20",
      "$Q$20"
    ],
    "I27": [
      "I20",
      "$Q$20"
    ],
    "J27": [
      "J20",
      "$Q$20"
    ],
    "K27": [
      "K20",
      "$Q$20"
    ],
    "L27": [
      "L20",
      "$Q$20"
    ],
    "M27": [
      "M20",
      "$Q$20"
    ],
    "N27": [
      "N20",
      "$Q$20"
    ],
    "O27": [
      "O20",
      "$Q$20"
    ],
    "P27": [
      "P20",
      "$Q$20"
    ],
    "Q27": [
      "Q20",
      "$Q$20"
    ],
    "R27": [
      "R20",
      "$Q$20"
    ],
    "S27": [
      "S20",
      "$Q$20"
    ],
    "T27": [
      "T20",
      "$Q$20"
    ],
    "U27": [
      "U20",
      "$Q$20"
    ],
    "V27": [
      "V20",
      "$Q$20"
    ],
    "W27": [
      "W20",
      "$Q$20"
    ],
    "X27": [
      "X20",
      "$Q$20"
    ],
    "Y27": [
      "Y20",
      "$Q$20"
    ],
    "Z27": [
      "Z20",
      "$Q$20"
    ],
    "AA27": [
      "AA20",
      "$Q$20"
    ],
    "AB27": [
      "AB20",
      "$Q$20"
    ],
    "AC27": [
      "AC20",
      "$Q$20"
    ],
    "E28": [
      "E21",
      "$Q$21"
    ],
    "F28": [
      "F21",
      "$Q$21"
    ],
    "G28": [
      "G21",
      "$Q$21"
    ],
    "H28": [
      "H21",
      "$Q$21"
    ],
    "I28": [
      "I21",
      "$Q$21"
    ],
    "J28": [
      "J21",
      "$Q$21"
    ],
    "K28": [
      "K21",
      "$Q$21"
    ],
    "L28": [
      "L21",
      "$Q$21"
    ],
    "M28": [
      "M21",
      "$Q$21"
    ],
    "N28": [
      "N21",
      "$Q$21"
    ],
    "O28": [
      "O21",
      "$Q$21"
    ],
    "P28": [
      "P21",
      "$Q$21"
    ],
    "Q28": [
      "Q21",
      "$Q$21"
    ],
    "R28": [
      "R21",
      "$Q$21"
    ],
    "S28": [
      "S21",
      "$Q$21"
    ],
    "T28": [
      "T21",
      "$Q$21"
    ],
    "U28": [
      "U21",
      "$Q$21"
    ],
    "V28": [
      "V21",
      "$Q$21"
    ],
    "W28": [
      "W21",
      "$Q$21"
    ],
    "X28": [
      "X21",
      "$Q$21"
    ],
    "Y28": [
      "Y21",
      "$Q$21"
    ],
    "Z28": [
      "Z21",
      "$Q$21"
    ],
    "AA28": [
      "AA21",
      "$Q$21"
    ],
    "AB28": [
      "AB21",
      "$Q$21"
    ],
    "AC28": [
      "AC21",
      "$Q$21"
    ],
    "E29": [
      "E27",
      "E26"
    ],
    "F29": [
      "F27",
      "F26"
    ],
    "G29": [
      "G27",
      "G26"
    ],
    "H29": [
      "H27",
      "H26"
    ],
    "I29": [
      "I27",
      "I26"
    ],
    "J29": [
      "J27",
      "J26"
    ],
    "K29": [
      "K27",
      "K26"
    ],
    "L29": [
      "L27",
      "L26"
    ],
    "M29": [
      "M27",
      "M26"
    ],
    "N29": [
      "N27",
      "N26"
    ],
    "O29": [
      "O27",
      "O26"
    ],
    "P29": [
      "P27",
      "P26"
    ],
    "Q29": [
      "Q27",
      "Q26"
    ],
    "R29": [
      "R27",
      "R26"
    ],
    "S29": [
      "S27",
      "S26"
    ],
    "T29": [
      "T27",
      "T26"
    ],
    "U29": [
      "U27",
      "U26"
    ],
    "V29": [
      "V27",
      "V26"
    ],
    "W29": [
      "W27",
      "W26"
    ],
    "X29": [
      "X27",
      "X26"
    ],
    "Y29": [
      "Y27",
      "Y26"
    ],
    "Z29": [
      "Z27",
      "Z26"
    ],
    "AA29": [
      "AA27",
      "AA26"
    ],
    "AB29": [
      "AB27",
      "AB26"
    ],
    "AC29": [
      "AC27",
      "AC26"
    ],
    "E30": [
      "E28",
      "E26"
    ],
    "F30": [
      "F28",
      "F26"
    ],
    "G30": [
      "G28",
      "G26"
    ],
    "H30": [
      "H28",
      "H26"
    ],
    "I30": [
      "I28",
      "I26"
    ],
    "J30": [
      "J28",
      "J26"
    ],
    "K30": [
      "K28",
      "K26"
    ],
    "L30": [
      "L28",
      "L26"
    ],
    "M30": [
      "M28",
      "M26"
    ],
    "N30": [
      "N28",
      "N26"
    ],
    "O30": [
      "O28",
      "O26"
    ],
    "P30": [
      "P28",
      "P26"
    ],
    "Q30": [
      "Q28",
      "Q26"
    ],
    "R30": [
      "R28",
      "R26"
    ],
    "S30": [
      "S28",
      "S26"
    ],
    "T30": [
      "T28",
      "T26"
    ],
    "U30": [
      "U28",
      "U26"
    ],
    "V30": [
      "V28",
      "V26"
    ],
    "W30": [
      "W28",
      "W26"
    ],
    "X30": [
      "X28",
      "X26"
    ],
    "Y30": [
      "Y28",
      "Y26"
    ],
    "Z30": [
      "Z28",
      "Z26"
    ],
    "AA30": [
      "AA28",
      "AA26"
    ],
    "AB30": [
      "AB28",
      "AB26"
    ],
    "AC30": [
      "AC28",
      "AC26"
    ],
    "E33": [
      "E15"
    ],
    "F33": [
      "F15"
    ],
    "G33": [
      "G15"
    ],
    "H33": [
      "H15"
    ],
    "I33": [
      "I15"
    ],
    "J33": [
      "J15"
    ],
    "K33": [
      "K15"
    ],
    "L33": [
      "L15"
    ],
    "M33": [
      "M15"
    ],
    "N33": [
      "N15"
    ],
    "O33": [
      "O15"
    ],
    "P33": [
      "P15"
    ],
    "Q33": [
      "Q15"
    ],
    "R33": [
      "R15"
    ],
    "S33": [
      "S15"
    ],
    "T33": [
      "T15"
    ],
    "U33": [
      "U15"
    ],
    "V33": [
      "V15"
    ],
    "W33": [
      "W15"
    ],
    "X33": [
      "X15"
    ],
    "Y33": [
      "Y15"
    ],
    "Z33": [
      "Z15"
    ],
    "AA33": [
      "AA15"
    ],
    "AB33": [
      "AB15"
    ],
    "AC33": [
      "AC15"
    ],
    "E34": [
      "$Q$34",
      "$Q$5",
      "E32",
      "$Q$32",
      "$Q$6"
    ],
    "F34": [
      "$Q$34",
      "$Q$5",
      "F32",
      "$Q$32",
      "$Q$6"
    ],
    "G34": [
      "$Q$34",
      "$Q$5",
      "G32",
      "$Q$32",
      "$Q$6"
    ],
    "H34": [
      "$Q$34",
      "$Q$5",
      "H32",
      "$Q$32",
      "$Q$6"
    ],
    "I34": [
      "$Q$34",
      "$Q$5",
      "I32",
      "$Q$32",
      "$Q$6"
    ],
    "J34": [
      "$Q$34",
      "$Q$5",
      "J32",
      "$Q$32",
      "$Q$6"
    ],
    "K34": [
      "$Q$34",
      "$Q$5",
      "K32",
      "$Q$32",
      "$Q$6"
    ],
    "L34": [
      "$Q$34",
      "$Q$5",
      "L32",
      "$Q$32",
      "$Q$6"
    ],
    "M34": [
      "$Q$34",
      "$Q$5",
      "M32",
      "$Q$32",
      "$Q$6"
    ],
    "N34": [
      "$Q$34",
      "$Q$5",
      "N32",
      "$Q$32",
      "$Q$6"
    ],
    "O34": [
      "$Q$34",
      "$Q$5",
      "O32",
      "$Q$32",
      "$Q$6"
    ],
    "P34": [
      "$Q$34",
      "$Q$5",
      "P32",
      "$Q$32",
      "$Q$6"
    ],
    "Q34": [
      "Q15"
    ],
    "R34": [
      "$Q$34",
      "$Q$5",
      "R32",
      "$Q$32",
      "$Q$6"
    ],
    "S34": [
      "$Q$34",
      "$Q$5",
      "S32",
      "$Q$32",
      "$Q$6"
    ],
    "T34": [
      "$Q$34",
      "$Q$5",
      "T32",
      "$Q$32",
      "$Q$6"
    ],
    "U34": [
      "$Q$34",
      "$Q$5",
      "U32",
      "$Q$32",
      "$Q$6"
    ],
    "V34": [
      "$Q$34",
      "$Q$5",
      "V32",
      "$Q$32",
      "$Q$6"
    ],
    "W34": [
      "$Q$34",
      "$Q$5",
      "W32",
      "$Q$32",
      "$Q$6"
    ],
    "X34": [
      "$Q$34",
      "$Q$5",
      "X32",
      "$Q$32",
      "$Q$6"
    ],
    "Y34": [
      "$Q$34",
      "$Q$5",
      "Y32",
      "$Q$32",
      "$Q$6"
    ],
    "Z34": [
      "$Q$34",
      "$Q$5",
      "Z32",
      "$Q$32",
      "$Q$6"
    ],
    "AA34": [
      "$Q$34",
      "$Q$5",
      "AA32",
      "$Q$32",
      "$Q$6"
    ],
    "AB34": [
      "$Q$34",
      "$Q$5",
      "AB32",
      "$Q$32",
      "$Q$6"
    ],
    "AC34": [
      "$Q$34",
      "$Q$5",
      "AC32",
      "$Q$32",
      "$Q$6"
    ],
    "E35": [
      "F33",
      "F5",
      "E32",
      "F32",
      "F6"
    ],
    "F35": [
      "G33",
      "G5",
      "F32",
      "G32",
      "G6"
    ],
    "G35": [
      "H33",
      "H5",
      "G32",
      "H32",
      "H6"
    ],
    "H35": [
      "I33",
      "I5",
      "H32",
      "I32",
      "I6"
    ],
    "I35": [
      "J33",
      "J5",
      "I32",
      "J32",
      "J6"
    ],
    "J35": [
      "K33",
      "K5",
      "J32",
      "K32",
      "K6"
    ],
    "K35": [
      "L33",
      "L5",
      "K32",
      "L32",
      "L6"
    ],
    "L35": [
      "M33",
      "M5",
      "L32",
      "M32",
      "M6"
    ],
    "M35": [
      "N33",
      "N5",
      "M32",
      "N32",
      "N6"
    ],
    "N35": [
      "O33",
      "O5",
      "N32",
      "O32",
      "O6"
    ],
    "O35": [
      "P33",
      "P5",
      "O32",
      "P32",
      "P6"
    ],
    "P35": [
      "Q33",
      "Q5",
      "P32",
      "Q32",
      "Q6"
    ],
    "Q35": [
      "Q15"
    ],
    "R35": [
      "Q33",
      "Q5",
      "R32",
      "Q32",
      "Q6"
    ],
    "S35": [
      "R33",
      "R5",
      "S32",
      "R32",
      "R6"
    ],
    "T35": [
      "S33",
      "S5",
      "T32",
      "S32",
      "S6"
    ],
    "U35": [
      "T33",
      "T5",
      "U32",
      "T32",
      "T6"
    ],
    "V35": [
      "U33",
      "U5",
      "V32",
      "U32",
      "U6"
    ],
    "W35": [
      "V33",
      "V5",
      "W32",
      "V32",
      "V6"
    ],
    "X35": [
      "W33",
      "W5",
      "X32",
      "W32",
      "W6"
    ],
    "Y35": [
      "X33",
      "X5",
      "Y32",
      "X32",
      "X6"
    ],
    "Z35": [
      "Y33",
      "Y5",
      "Z32",
      "Y32",
      "Y6"
    ],
    "AA35": [
      "Z33",
      "Z5",
      "AA32",
      "Z32",
      "Z6"
    ],
    "AB35": [
      "AA33",
      "AA5",
      "AB32",
      "AA32",
      "AA6"
    ],
    "AC35": [
      "AB33",
      "AB5",
      "AC32",
      "AB32",
      "AB6"
    ],
    "E36": [
      "E34",
      "E33"
    ],
    "F36": [
      "F34",
      "F33"
    ],
    "G36": [
      "G34",
      "G33"
    ],
    "H36": [
      "H34",
      "H33"
    ],
    "I36": [
      "I34",
      "I33"
    ],
    "J36": [
      "J34",
      "J33"
    ],
    "K36": [
      "K34",
      "K33"
    ],
    "L36": [
      "L34",
      "L33"
    ],
    "M36": [
      "M34",
      "M33"
    ],
    "N36": [
      "N34",
      "N33"
    ],
    "O36": [
      "O34",
      "O33"
    ],
    "P36": [
      "P34",
      "P33"
    ],
    "Q36": [
      "Q34",
      "Q33"
    ],
    "R36": [
      "R34",
      "R33"
    ],
    "S36": [
      "S34",
      "S33"
    ],
    "T36": [
      "T34",
      "T33"
    ],
    "U36": [
      "U34",
      "U33"
    ],
    "V36": [
      "V34",
      "V33"
    ],
    "W36": [
      "W34",
      "W33"
    ],
    "X36": [
      "X34",
      "X33"
    ],
    "Y36": [
      "Y34",
      "Y33"
    ],
    "Z36": [
      "Z34",
      "Z33"
    ],
    "AA36": [
      "AA34",
      "AA33"
    ],
    "AB36": [
      "AB34",
      "AB33"
    ],
    "AC36": [
      "AC34",
      "AC33"
    ],
    "E40": [
      "E15",
      "$Q$15"
    ],
    "F40": [
      "F15",
      "$Q$15"
    ],
    "G40": [
      "G15",
      "$Q$15"
    ],
    "H40": [
      "H15",
      "$Q$15"
    ],
    "I40": [
      "I15",
      "$Q$15"
    ],
    "J40": [
      "J15",
      "$Q$15"
    ],
    "K40": [
      "K15",
      "$Q$15"
    ],
    "L40": [
      "L15",
      "$Q$15"
    ],
    "M40": [
      "M15",
      "$Q$15"
    ],
    "N40": [
      "N15",
      "$Q$15"
    ],
    "O40": [
      "O15",
      "$Q$15"
    ],
    "P40": [
      "P15",
      "$Q$15"
    ],
    "Q40": [
      "Q15",
      "$Q$15"
    ],
    "R40": [
      "R15",
      "$Q$15"
    ],
    "S40": [
      "S15",
      "$Q$15"
    ],
    "T40": [
      "T15",
      "$Q$15"
    ],
    "U40": [
      "U15",
      "$Q$15"
    ],
    "V40": [
      "V15",
      "$Q$15"
    ],
    "W40": [
      "W15",
      "$Q$15"
    ],
    "X40": [
      "X15",
      "$Q$15"
    ],
    "Y40": [
      "Y15",
      "$Q$15"
    ],
    "Z40": [
      "Z15",
      "$Q$15"
    ],
    "AA40": [
      "AA15",
      "$Q$15"
    ],
    "AB40": [
      "AB15",
      "$Q$15"
    ],
    "AC40": [
      "AC15",
      "$Q$15"
    ],
    "E41": [
      "E34",
      "$Q$34"
    ],
    "F41": [
      "F34",
      "$Q$34"
    ],
    "G41": [
      "G34",
      "$Q$34"
    ],
    "H41": [
      "H34",
      "$Q$34"
    ],
    "I41": [
      "I34",
      "$Q$34"
    ],
    "J41": [
      "J34",
      "$Q$34"
    ],
    "K41": [
      "K34",
      "$Q$34"
    ],
    "L41": [
      "L34",
      "$Q$34"
    ],
    "M41": [
      "M34",
      "$Q$34"
    ],
    "N41": [
      "N34",
      "$Q$34"
    ],
    "O41": [
      "O34",
      "$Q$34"
    ],
    "P41": [
      "P34",
      "$Q$34"
    ],
    "Q41": [
      "Q34",
      "$Q$34"
    ],
    "R41": [
      "R34",
      "$Q$34"
    ],
    "S41": [
      "S34",
      "$Q$34"
    ],
    "T41": [
      "T34",
      "$Q$34"
    ],
    "U41": [
      "U34",
      "$Q$34"
    ],
    "V41": [
      "V34",
      "$Q$34"
    ],
    "W41": [
      "W34",
      "$Q$34"
    ],
    "X41": [
      "X34",
      "$Q$34"
    ],
    "Y41": [
      "Y34",
      "$Q$34"
    ],
    "Z41": [
      "Z34",
      "$Q$34"
    ],
    "AA41": [
      "AA34",
      "$Q$34"
    ],
    "AB41": [
      "AB34",
      "$Q$34"
    ],
    "AC41": [
      "AC34",
      "$Q$34"
    ],
    "E42": [
      "E35",
      "$Q$35"
    ],
    "F42": [
      "F35",
      "$Q$35"
    ],
    "G42": [
      "G35",
      "$Q$35"
    ],
    "H42": [
      "H35",
      "$Q$35"
    ],
    "I42": [
      "I35",
      "$Q$35"
    ],
    "J42": [
      "J35",
      "$Q$35"
    ],
    "K42": [
      "K35",
      "$Q$35"
    ],
    "L42": [
      "L35",
      "$Q$35"
    ],
    "M42": [
      "M35",
      "$Q$35"
    ],
    "N42": [
      "N35",
      "$Q$35"
    ],
    "O42": [
      "O35",
      "$Q$35"
    ],
    "P42": [
      "P35",
      "$Q$35"
    ],
    "Q42": [
      "Q35",
      "$Q$35"
    ],
    "R42": [
      "R35",
      "$Q$35"
    ],
    "S42": [
      "S35",
      "$Q$35"
    ],
    "T42": [
      "T35",
      "$Q$35"
    ],
    "U42": [
      "U35",
      "$Q$35"
    ],
    "V42": [
      "V35",
      "$Q$35"
    ],
    "W42": [
      "W35",
      "$Q$35"
    ],
    "X42": [
      "X35",
      "$Q$35"
    ],
    "Y42": [
      "Y35",
      "$Q$35"
    ],
    "Z42": [
      "Z35",
      "$Q$35"
    ],
    "AA42": [
      "AA35",
      "$Q$35"
    ],
    "AB42": [
      "AB35",
      "$Q$35"
    ],
    "AC42": [
      "AC35",
      "$Q$35"
    ],
    "E43": [
      "E41",
      "E40"
    ],
    "F43": [
      "F41",
      "F40"
    ],
    "G43": [
      "G41",
      "G40"
    ],
    "H43": [
      "H41",
      "H40"
    ],
    "I43": [
      "I41",
      "I40"
    ],
    "J43": [
      "J41",
      "J40"
    ],
    "K43": [
      "K41",
      "K40"
    ],
    "L43": [
      "L41",
      "L40"
    ],
    "M43": [
      "M41",
      "M40"
    ],
    "N43": [
      "N41",
      "N40"
    ],
    "O43": [
      "O41",
      "O40"
    ],
    "P43": [
      "P41",
      "P40"
    ],
    "Q43": [
      "Q41",
      "Q40"
    ],
    "R43": [
      "R41",
      "R40"
    ],
    "S43": [
      "S41",
      "S40"
    ],
    "T43": [
      "T41",
      "T40"
    ],
    "U43": [
      "U41",
      "U40"
    ],
    "V43": [
      "V41",
      "V40"
    ],
    "W43": [
      "W41",
      "W40"
    ],
    "X43": [
      "X41",
      "X40"
    ],
    "Y43": [
      "Y41",
      "Y40"
    ],
    "Z43": [
      "Z41",
      "Z40"
    ],
    "AA43": [
      "AA41",
      "AA40"
    ],
    "AB43": [
      "AB41",
      "AB40"
    ],
    "AC43": [
      "AC41",
      "AC40"
    ],
    "E44": [
      "E42",
      "E40"
    ],
    "F44": [
      "F42",
      "F40"
    ],
    "G44": [
      "G42",
      "G40"
    ],
    "H44": [
      "H42",
      "H40"
    ],
    "I44": [
      "I42",
      "I40"
    ],
    "J44": [
      "J42",
      "J40"
    ],
    "K44": [
      "K42",
      "K40"
    ],
    "L44": [
      "L42",
      "L40"
    ],
    "M44": [
      "M42",
      "M40"
    ],
    "N44": [
      "N42",
      "N40"
    ],
    "O44": [
      "O42",
      "O40"
    ],
    "P44": [
      "P42",
      "P40"
    ],
    "Q44": [
      "Q42",
      "Q40"
    ],
    "R44": [
      "R42",
      "R40"
    ],
    "S44": [
      "S42",
      "S40"
    ],
    "T44": [
      "T42",
      "T40"
    ],
    "U44": [
      "U42",
      "U40"
    ],
    "V44": [
      "V42",
      "V40"
    ],
    "W44": [
      "W42",
      "W40"
    ],
    "X44": [
      "X42",
      "X40"
    ],
    "Y44": [
      "Y42",
      "Y40"
    ],
    "Z44": [
      "Z42",
      "Z40"
    ],
    "AA44": [
      "AA42",
      "AA40"
    ],
    "AB44": [
      "AB42",
      "AB40"
    ],
    "AC44": [
      "AC42",
      "AC40"
    ]
  }
}